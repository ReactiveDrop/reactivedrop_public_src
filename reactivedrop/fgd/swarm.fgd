//====== Copyright Â© 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: Infested game definition file (.fgd) 
//
//=============================================================================

@include "swarmbase.fgd"

//-------------------------------------------------------------------------
//
// NPCs
//
//-------------------------------------------------------------------------
@BaseClass base(BaseNPC) = TalkNPC
[
	UseSentence(string) : "Use Sentence"
	UnUseSentence(string) : "Un-Use Sentence"

	DontUseSpeechSemaphore(choices) : "Don't Use Speech Semaphore" : 0 : "Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks." =
	[
		0 : "No (Use speech semaphore)"
		1 : "Yes (Don't use speech semaphore)"
	]

	input SpeakResponseConcept(string) : "Speak the specified response concept."
]

@BaseClass base(BaseNPC) = PlayerCompanion
[
	input OutsideTransition(void) : "Use this input to teleport the NPC to a hintnode with the Player Squad Transition Point hint type."
	input EnableAlwaysTransition(void) : "Enable the 'always transition' behavior"
	input DisableAlwaysTransition(void) : "Disable the 'always transition' behavior"
	
	input EnableSpeakWhileScripting(void) : "Allow this NPC to speak responses while in a scripted sequence or while StartScripting is active."
	input DisableSpeakWhileScripting(void) : "Cancels this NPC's ability to speak responses while in a scripted sequence or while StartScripting is active if it was previously enabled by EnableSpeakWhileScripting."
	
	AlwaysTransition(choices) : "Always transition" : "No" : "If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume." =
	[
		0 : "No"
		1 : "Yes"
	]

	DontPickupWeapons(choices) : "Prevent picking up weapons?" : "No" : "If yes, this NPC will NOT be allowed to pick up weapons they find on the ground." =
	[
		0 : "No"
		1 : "Yes"	
	]

	GameEndAlly(choices) : "Is this a vital ally?" : "No" : "If yes, this NPC will cause the game to end if killed." =
	[
		0 : "No"
		1 : "Yes"	
	]

	input MakeGameEndAlly(void) : "Make this NPC a game end ally."
	input MakeRegularAlly(void) : "Make this NPC a regular ally."

	input EnableWeaponPickup(void) : "Enable Weapon Pickup"
	input DisableWeaponPickup(void) : "Disable Weapon Pickup"

	input GiveWeapon(string) : "Gives the NPC a weapon of the specified entity name."
	
	input SetReadinessPanic(void) : "Set readiness to panic state (Special)"
	input SetReadinessLow(void) : "Set readiness to calmest state (Bored)"
	input SetReadinessMedium(void) : "Set readiness to moderate (Alert)"
	input SetReadinessHigh(void) : "Set readiness to highest. (Combat imminent)"
	input LockReadiness(float) : "Lock readiness at current setting for x seconds -1 = forever, 0 = unlock now"
	
	input ClearAllOutputs(void) : "Obliterate every output that this NPC has."

	output OnWeaponPickup(void) : "Fires when this NPC picks a weapon off the ground or a gun rack."
]

@BaseClass base(trigger_multiple) = trigger_asw_use_area :
	"A trigger volume that is used to define areas for using various things."
[
	spawnflags(flags) = 
	[
		//1: "Clients" : 0
		2: "Marines and Aliens" : 1
		4: "Pushables": 0
		8: "Physics Objects" : 0
		16: "Only marines" : 0
		//32: "Only clients in vehicles" : 0
		64: "Everything" : 0
		//512: "Only clients *not* in vehicles" : 0
	]
	usetargetname(target_destination) : "UseTarget" : : "The name of the item this use area is connected to."

	playersrequired(integer) : "Players Required" : 1 : "Number of players that must be present for the trigger to work when used. Setting this higher than the number of players currently playing will make the total number of players the actual requirement."

	output OnRequirementFailed(void) : "Fired whenever a marine uses this button panel but the player requirement hasn't been met."
]

@PointClass base(Targetname, Angles, EnableDisable) iconsprite("editor/info_target.vmt") = info_target_vehicle_transition : "Vehicle Transition Point"
[
]

@NPCClass base(BaseNPC) studio("models/antlion.mdl") sphere() = npc_antlion :
	"Antlions will run away from ai_sound, type: Thumper."
[
	startburrowed(choices) : "Start Burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		65536 : "Burrow when eluded" : 0
		131072 : "Use Ground Checks" : 0
		262144 : "Worker Type" : 0
	]

	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	
	ignorebugbait(choices) : "Ignore Bugbait" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	unburroweffects(choices) : "Suppress unburrow effects" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	input Unburrow(void) : "Unburrow from the ground"
	input Burrow(void) : "Burrow into the ground"
	input BurrowAway(void) : "Burrow into the ground and remove the antlion"
	input FightToPosition(string) : "Fight to position"
	input EnableJump(void) : "Allow non-navigational jumping"
	input DisableJump(void) : "Disallow non-navigational jumping"
	input IgnoreBugbait(void) : "Ignore bugbait"
	input HearBugbait(void) : "Hear bugbait"

	output	OnReachedFightGoal(void) : "Fires when the antlion reaches his specified fight-to location"
	output	OnUnBurrowed(void) : "Fires when the antlion unburrows"

]

@NPCClass base(BaseNPC) studio("models/antlion_guard.mdl") = npc_antlionguard : "Antlion Guard"
[
	spawnflags(Flags) =
	[
		65536 : "Create server-side ragdoll on death" : 0
		131072 : "Use inside footsteps" : 0
	]

	startburrowed(choices) : "Start Burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	allowbark(choices) : "Allow Bark" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	cavernbreed(choices) : "Cavern Guard Model and Texture" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	incavern(choices) : "Use inside-Cavern Behavior" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	shovetargets(string) : "Shove Targets" : ""

	// Inputs
	input Unburrow(void) : "Unburrow from the ground"
	input SetShoveTarget(string) : "Sets a shove target to attack"
	input SetChargeTarget(string) : "Sets a charge target to attack.  Parameters are the name of the entity to start at and the name of the entity to charge towards, separated by a space (i.e. start target)"
	input ClearChargeTarget(void) : "Clear the charge target"
	input SetCoverFromAttack(integer) : "Sets whether or not the creature will protect itself from attacks"
	input Ragdoll(void) : "Causes the antlion guard to die, regardless of health"
	input EnableBark(void) : "Allow the antlion guard to try and summon antlions"
	input DisableBark(void) : "Stop the antlion guard from trying to summon antlions"
	input InvestigateHint(string) : "Sniff around at a hint group until told otherwise"
	input StopInvestigating(void) : "Stop trying to sniff out the player"

	input EnablePreferPhysicsAttack(void) : "Prefer to use physics attacks if at all possible, even when inside a cavern."
	input DisablePreferPhysicsAttack(void) : "Do not prefer to use physics attacks if at all possible, even when inside a cavern."

		
	// Outputs
	output OnSeeHiddenPlayer(void) : "Fires when the current enemy is seen while trying to hide"
	output OnSmellHiddenPlayer(void) : "Fires when the current enemy is smelled while trying to hide"
	output OnSummon(void) : "Antlion guard is attempting to summon antlions"
]

@BaseClass base(BaseNPC) = BaseHeadcrab
[
	startburrowed(choices) : "Start burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spawnflags(flags) = 
	[
		65536  :  "Start hidden" : 0
		131072 :  "Start hanging from ceiling" : 0
	]


	input StartHangingFromCeiling(void) : "Start hanging from ceiling."
	input DropFromCeiling(void) : "Drop if hanging from ceiling."
]

@NPCClass base(BaseHeadcrab, Parentname) studio("models/Headcrabclassic.mdl") = npc_headcrab : "Headcrab"
[
]
@NPCClass base(BaseHeadcrab) studio("models/Headcrab.mdl") = npc_headcrab_fast : "Fast Headcrab"
[
]
@NPCClass base(BaseHeadcrab) studio("models/Headcrabblack.mdl") = npc_headcrab_black : "Black Headcrab"
[
]

@NPCClass base(Parentname, BaseNPC) iconsprite("editor/bullseye.vmt") color(255 0 0) = npc_bullseye : "Bullseye"
[
	// Unlike other NPCs level designers are allowed to set the health on bullseyes
	health(Integer) : "Health" : 35

	minangle(string) : "Minimum Angle" : "360" : "Angle from the bullseye required for bullseye to be a valid enemy"
	mindist(string) : "Minimum Distance" : "0" : "Distance from the bullseye required for bullseye to be a valid enemy"

	autoaimradius(float) : "Autoaim Radius" : "0" : "Radius of autoaim influence. Use ent_autoaim <picker> to visualize."

	faction(choices) : "Faction": 0 : "Faction this bullseye is a member of." =
	[
		0 : "None"
		1 : "Marines"
		2 : "Aliens"
		3 : "Bait"
		4 : "Neutral"
	]
	damagemultipliersamefaction(float) : "Same Faction Damage Scale" : "1.0" : "Amount to scale damage by when attacked by the faction the bullseye is a member of."
	damagemultiplierotherfaction(float) : "Different Faction Damage Scale" : "1.0" : "Amount to scale damage by when attacked by a faction the bullseye is NOT a member of."

	spawnflags(Flags) = 
	[
		65536   : "Not Solid" : 0
		131072  : "Take No Damage" : 0
		262144  : "Enemy (intentional target of an NPC) Damage Only" : 0
		524288  : "Bleed" : 0
		1048576 : "Perfect Accuracy" : 0
		2097152 : "Collide against physics objects (Creates VPhysics Shadow)" : 0
	]
	output OnTargeted(void) : "Fires when targeted"
	output OnReleased(void) : "Fires when no longer targeted"
]

@PointClass base(Targetname, Parentname, EnableDisable) = env_sporeexplosion : "Bugbait Spore Effect"
[
	spawnrate(float) : "Spawn Rate (as percentage)" : "25" : "How dense the spore effect is"
]

@PointClass base(Targetname, Parentname, Targetname, EnableDisable) = env_gunfire : "Gunfire Effect"
[
	target(target_destination) : "Target" : "" : "Shoot at this target. REMEMBER - this is an effect only! It does not do damage!"

	minburstsize(integer) : "Min Burst Size" : 2 : "Minimum number of rounds in a burst."
	maxburstsize(integer) : "Max Burst Size" : 7 : "Maximum number of rounds in a burst."

	minburstdelay(float) : "Min Delay Between Bursts" : 2 : "Minimum delay between bursts. (seconds)"
	maxburstdelay(float) : "Max Delay Between Bursts" : 5 : "Maximum delay between bursts. (seconds)"

	rateoffire(float) : "Rate of fire" : 10 : "Expressed as rounds per second"

	spread(choices) : "Bullet spread" : 5 : "The 'cone of inaccuracy' of the shots fired by this entity." =
	[
		1 : "1 Degree"
		5 : "5 Degrees"
		10 : "10 Degrees"
		15 : "15 Degrees"
	]

	bias(choices) : "Bullet distribution should be..." : 1 : "How to distribute bullets within the spread. Even distribution is a true scatter throughout the spread. Biased towards the outside makes the shots 'miss' the target by tending towards the outside of the spread." =
	[
		1 : "Evenly distributed"
		-1 : "Biased towards the outside"
	]

	collisions(choices) : "Collision detection" : 0 : "Whether/how to handle bullet collision detection. NOTE: If you select NONE, this entity will be very cheap to use, but all bullets will stop short at their target's position in space and there will be no impact effects. Normal collision detection does the same things NPCs do when they fire their guns (except harm anything)." =
	[
		0 : "None. Cheap for performance."
		1 : "Normal collision detection."
	]

	shootsound(choices) : "Shoot Sound" : "Weapon_AR2.NPC_Single" : "Gunfire sound to make" = 
	[
		"Weapon_AR2.NPC_Single" : "AR2"
		"Weapon_SMG1.NPC_Single" : "SMG1"
	]

	tracertype(choices) : "Tracer" : "AR2TRACER" : "Type of tracer to display" = 
	[
		"Tracer" : "Default"
		"AR2TRACER" : "AR2"
	]
]

@NPCClass base(BaseNPC) studio("models/Zombie/fast.mdl") = npc_fastzombie : "Fast Zombie"
[
	input AttachToVehicle(string) : "Attach to a specified vehicle entity"
]

@NPCClass base(BaseNPC) studio("models/Zombie/Fast_torso.mdl") = npc_fastzombie_torso : "Fast Zombie Torso"
[

]

@NPCClass base(BaseNPC) studio("models/Zombie/Classic.mdl") = npc_zombie : "Zombie"
[
]

@NPCClass base(BaseNPC) studio("models/Zombie/Classic_torso.mdl") = npc_zombie_torso : "Zombie Torso"
[
]

@NPCClass base(BaseNPC) studio("models/Zombie/zombie_soldier.mdl") = npc_zombine : "Combine Soldier Zombie"
[
	input StartSprint(void) : "Forces the zombine to sprint."
	input PullGrenade(void) : "Forces the zombine to pull a grenade."
]
@NPCClass base(BaseNPC) studio("models/Zombie/Poison.mdl") = npc_poisonzombie :
	"A bloated, disgusting, fluid-spurting zombie created by a poison headcrab."
[
	crabcount(choices) : "Crabs in nest" : 3 =
	[
		1 : "1 Crab"
		2 : "2 Crabs"
		3 : "3 Crabs"
	]
]

@NPCClass base(BaseNPC) studio("models/combine_scanner.mdl") = npc_cscanner : "City Scanner"
[
	spawnflags(Flags) = 
	[
		65536 :  "No Dynamic Light" : 0
		131072: "Strider Scout Scanner" : 0
	]

	spotlightlength(integer) : "SpotlightLength" : 500
	spotlightwidth(integer) : "SpotlightWidth" : 50	
	
	spotlightdisabled(choices) : "SpotlightDisabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	ShouldInspect(choices) : "Should inspect" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	OnlyInspectPlayers(choices) : "Only Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	NeverInspectPlayers(choices) : "Never Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	// Inputs
	input DisableSpotlight(void) : "DisableSpotlight"
	input InspectTargetPhoto(string) : "Tells the scanner to photograph the given entity, named by classname or by target name. !activator or !player works here also."
	input InspectTargetSpotlight(string) : "Tells the scanner to spotlight the given entity, named by classname or by target name. !activator or !player works here also."
	input InputSetFlightSpeed(integer) : "Sets the flight speed of the scanner"
	input InputShouldInspect(integer) : "Set whether should inspect or not"
	input SetFollowTarget(string) : "Set target to follow until told otherwise"
	input ClearFollowTarget(void) : "Stop following our target"
	input SetDistanceOverride(float) : "Override the distance the scanner will attempt to keep between inspection targets and itself"

	input DeployMine(void) : "Drop landmine (if carrying one)"
	input EquipMine(void) : "Equip with landmine"
	
	// Outputs
	output OnPhotographPlayer(void) : "Fired any time the scanner takes a picture of the player."
	output OnPhotographNPC(void) : "Fired any time the scanner takes a picture of an NPC."
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = monster_generic : "Generic Script NPC"
[
	spawnflags(Flags) = 
	[
		65536 : "Not solid" : 0
	]
	model(studio) : "Model"
	body(Integer) : "Body" : 0
]


@PointClass base(BaseNPC, Parentname, RenderFields, Shadow) studio() = generic_actor : "Generic Actor NPC"
[
	model(studio) : "Model"

	hull_name(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = cycler_actor : "Actor Cycler"
[
	model(studio) : "Model"
	Sentence(string) : "Sentence Group" : ""

	input Alpha(integer) : "Set Alpha Value"
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = npc_maker : "NPC Maker"
[
	spawnflags(Flags) = 
	[
		16 : "Fade Corpse" : 0
	]

	NPCType(npcclass) : "Class name of spawned NPC"
	NPCTargetname(string) : "Childrens' Name"
	NPCSquadname(string) : "Childrens' Squad Name"
	NPCHintGroup(string) : "Childrens' Hint Group"
	
	additionalequipment(choices) : "Weapons" : "0" =
	[
		"weapon_pistol" : "Pistol"
		"weapon_ar2" : "AR2"
		"weapon_shotgun" : "Shotgun"
		"weapon_smg1" : "SMG1"
		"weapon_stunstick" : "Stun Stick"
		"weapon_annabelle"	:"Grigori's Shotgun"
		"0" : "Nothing"
	]
]

@PointClass base(Angles, BaseNPCMaker) size(-8 -8 -8, 8 8 8) color(0 0 255) = npc_antlion_template_maker : "Antlion Template Maker"
[
	spawnflags(Flags) = 
	[
		1024 : "Random spawn node" : 0
		2048 : "Try to spawn close to the current target" : 0
		4096 : "Pick a random fight target" : 0
		8192 : "Try to play blocked effects near the player" : 0
	]

	TemplateName(target_destination) : "Name of template NPC"

	spawngroup(string) : "Spawn on Hint Group" : "" : "If specified, children will spawn on a hint node from this group, nearest the target."
	spawnradius(float) : "Spawn radius" : 512 : "Target must be within this distance of any node in the hint group specified above. If the target is outside the radius, no NPC will spawn."
	spawntarget(string): "Spawn target" : "" : "Targetname of the entity to try and spawn near."
	fighttarget(string): "Fight target" : "" : "Targetname of an entity used as a goal for the children to fight to."
	followtarget(string): "Follow target" : "" : "Targetname of an entity used as a goal for the children to follow."
	vehicledistance(float): "Vehicle Spawn Distance" : "1" : "This is a modifier of the current spawn distance. Spawn distance on a vehicle is based on speed, so this is just a modifier for it."
	workerspawnrate(float): "Random Worker Spawn Rate" : "0" : "Percentage chance that a spawned antlion will be a worker. (0 = no chance, 1 = 100% chance)"
	
	ignorebugbait(choices): "Ignore Bugbait" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]

	pool_start(integer) : "Initial antlions in the pool." : 0 : "Number of antlions in the pool at map start."
	pool_max(integer) : "Max antlions in the pool." : 0 : "Maximum number of antlions allowed in the pool. If 0, pool behavior is turned off."
	pool_regen_amount(integer) : "Pool regen amount." : 0 : "This is the number of antlions added to the pool every time it regenerates."
	pool_regen_time(float) : "Pool regen time." : 0 : "Time interval between pool regeneration ticks."

	// Inputs
	input SetFightTarget(string) : "Sets the target entity for children to fight to."
	input ClearFightTarget(void) : "Clears the fight target goal for this spawner."
	input SetFollowTarget(string) : "Sets the target entity for children to follow."
	input ClearFollowTarget(void) : "Clears the follow target goal for this spawner."
	input SetSpawnRadius(float) : "Sets the Spawn Radius."
	input AddToPool(integer) : "Add the number of antlions specified in the parameter to the pool."
	input SetMaxPool(integer) : "Set the maximum number of antlions allowed in the pool at any time. Setting it to 0 turns off the pool behavior."
	input SetPoolRegenAmount(integer) : "Set the number of antlions added to the pool every time it regenerates."
	input SetPoolRegenTime(float) : "Set the time interval between pool regeneration ticks."
	input ChangeDestinationGroup(string) : "Change the spawn group for this spawner."

    // Outputs
	output OnAllBlocked(void) : "Fires when all the hint nodes are blocked."

	createspores(choices): "Create Spore effect" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname) sphere(repelradius) color(0 0 255) = point_antlion_repellant : "Antlion Repellant"
[
	repelradius(float): "Repell radius" : 512 : "Antlions aren't allowed to be inside this radius"
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

//-------------------------------------------------------------------------
//
// Player Control Entities
//
//-------------------------------------------------------------------------

@BaseClass base(Targetname) size(-10 -10 -10, 10 10 10) color(255 0 255) = player_control
[
	// Inputs
	input Activate(void) : "Turns on"
	input Deactivate(void) : "Turns off"
	input SetThrust(string) : "Set Thrust"
	input SetSideThrust(string)  : "Set Side Thrust"
]

 
//-------------------------------------------------------------------------
//
// Scripted Events
//
//-------------------------------------------------------------------------

@BaseClass base(Targetname, Parentname, Angles) color(255 0 255) sphere(m_flRadius) = BaseScripted
[
	m_iszEntity(target_destination) : "Target NPC" : : "The name or class name (such as 'npc_zombie') of an NPC to use for this script."
	m_iszIdle(string) : "Pre Action Idle Animation" : "" : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must wait for the script to be triggered. Use 'Start on Spawn' flag or MoveToPosition input to play this idle animation."
	m_iszEntry(string) : "Entry Animation" : "" : "The name of the sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play when the sequence starts, before transitioning to play the main action sequence."
	m_iszPlay(string) : "Action Animation" : "" : "The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play."
	m_iszPostIdle(string) : "Post Action Idle Animation" : "" : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play after the action animation."
	m_iszCustomMove(string) : "Custom Move Animation" : "" : "Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'crouch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position."
	m_bLoopActionSequence(Choices) : "Loop Action Animation?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	m_bSynchPostIdles(Choices) : "Synch Post Idles?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."
	m_flRepeat(integer) : "Repeat Rate ms" : 0
	m_fMoveTo(Choices) : "Move to Position" : 1 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		3 : "Custom movement"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
	]
	m_iszNextScript(target_destination) : "Next Script" : : "The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts."
	m_bIgnoreGravity(choices) : "Ignore Gravity on NPC during script" : 0 : "If this is set to 'Yes', the NPC will not be subject to gravity while playing this script." =
	[
		0 : "No"
		1 : "Yes"
	]
	m_bDisableNPCCollisions(choices) : "Disable NPC collisions during script" : 0 : "Useful for when NPCs playing scripts must interpenetrate while riding on trains, elevators, etc. This only disables collisions between the NPCs in the script and must be enabled on BOTH scripted_sequences." =
	[
		0 : "No"
		1 : "Yes"
	]


	// Inputs
	input BeginSequence(void) : "Summons an NPC to act out the scripted sequence."
	input MoveToPosition(void) : "Summons an NPC to the script location. They will play their scripted idle (or ACT_IDLE if none is specified) until BeginSequence is triggered."
	input CancelSequence(void) : "Stops the scripted sequence. If fired after a sequence starts, this input will not take effect until the NPC finishes playing the scripted action animation."

	// Outputs
	output OnBeginSequence(void) : "Fires when the action animation begins playing."
	output OnEndSequence(void) : "Fires when the action animation completes."
	output OnCancelSequence(void) : "Fires when the sequence is cancelled."
	output OnCancelFailedSequence(void) : "Fires when the sequence is cancelled without ever playing (OnCancelSequence will also fire)."
	output OnScriptEvent01(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 1 } in the QC."
	output OnScriptEvent02(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 2 } in the QC."
	output OnScriptEvent03(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 3 } in the QC."
	output OnScriptEvent04(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 4 } in the QC."
	output OnScriptEvent05(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 5 } in the QC."
	output OnScriptEvent06(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 6 } in the QC."
	output OnScriptEvent07(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 7 } in the QC."
	output OnScriptEvent08(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 8 } in the QC."
]

@PointClass sphere() iconsprite("editor/scripted_sentence.vmt") base(Targetname) = scripted_sentence : "Scripted Sentence"
[
	spawnflags(Flags) = 
	[
		1 : "Fire Once"  : 1
		2 : "Followers Only" : 0
		4 : "Interrupt Speech" : 1
		8 : "Concurrent" : 0
		16 : "Speak to Activator" : 1
	]

	sentence(string) : "Sentence Name" : ""
	entity(string) : "Speaker Type"
	delay(string) : "Additional Sentence Time" : "0"
	radius(integer) : "Search Radius" : 512
	refire(string) : "Delay Before Refire" : "3"
	listener(string) : "Listener Type"
	volume(string) : "Volume 0-10" : "10"
	attenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]

	// Inputs
	input BeginSentence(void) : "Starts the scripted sentence."

	// Outputs
	output OnBeginSentence(void) : "Fires when the sentence begins"
	output OnEndSentence(void) : "Fires when the sentence ends"
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = scripted_target : "Scripted Target"
[
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	m_iszEntity(npcclass) : "Target NPC"
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	MoveSpeed(integer) : "Move Speed" : 5			// How quickly should target move between scripted targets
	PauseDuration(integer) : "Pause Duration" : 0		// How long should target pause at scripted target
	EffectDuration(integer) : "Effect Duration" : 2		// How long should any associated effect last

	target(target_destination) : "Next Target"		// Next scripted target

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output AtTarget(void) : "Fires when NPC reaches this target"
	output LeaveTarget(void) : "Fires when NPC leaves this target"
]

@PointClass base(Targetname) iconsprite("editor/ai_relationship.vmt") sphere() = ai_relationship : 
	"AI Relationship - Sets relationships between groups of NPCs in the AI."
[
	subject(target_name_or_class) : "Subject(s)" : "" : "This is the NPC(s) whose disposition will change. May be a targetname or a classname."
	target(target_name_or_class) : "Target(s)" : "" : "This is the NPC(s) about whom the Subject(s) will change their disposition. May be a tarGetname or a classname."
	disposition(choices) : "Disposition" : 3 : "Choose the way the Subject(s) should feel about the Target(s)" =
	[
		// These MUST match the enum in the code! (basecombatcharacter.h)
		1 : "Hate"
		2 : "Fear"
		3 : "Like"
		4 : "Neutral"
	]

	radius(float) : "Radius for subject" : 0

	rank(integer) : "Disposition Priority" : 0 : "How much the Subject(s) should Like/Hate/Fear the Target(s). Higher priority = stronger feeling."

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	Reciprocal(choices) : "Reciprocal" : 0 : "Set this to YES to have the new relationship mirrored by Target"  =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(flags) =
	[
		1 : "Notify subject of target's location" : 0
		2 : "Notify target of subject's location" : 0
	]
	
	// Inputs
	input ApplyRelationship(void) : "Apply relationship changes. This will change all Subject entities' relationships to all Target entities. \n\nIMPORTANT: Once you ApplyRelationships, this entity is then 'ALWAYS ON' until you send a Disable input or RevertRelationship input. During the time this entity is 'ON', any entities that spawn who match the Subject or Target names will be affected. \n\nIMPORTANT: Unpredictable results may occur when two ai_relationship entities refer to the same set or subset of target or subject entities. This situation should be avoided."

	input RevertRelationship(void) : "Revert relationship changes. This will return the relationship to what it was at the time the ApplyRelationship input was called (or when this ai_relationship was spawned if StartActive is set)."
	input RevertToDefaultRelationship(void) : "Revert relationship changes to the default relationship, which may have changed since this ai_relationship was applied. This returns control of the entity relationship to the code."
]

@PointClass base(Targetname) = ai_ally_manager : "AI Ally Manager"
[
	maxallies(integer) : "Maximum number of allies" : 5
	maxmedics(integer) : "Maximum number of medics" : 1

	// Inputs
	input SetMaxAllies(integer) : "Set maximum number of allies"
	input SetMaxMedics(integer) : "Set maximum number of medic allies"
	input Replenish(void) : "Replenish player allies"

	// Outputs
	output SpawnMedicAlly(void) : "Spawn Medic Ally"
	output SpawnAlly0(void) : "Spawn Ally 0"
	output SpawnAlly1(void) : "Spawn Ally 1"
	output SpawnAlly2(void) : "Spawn Ally 2"
	output SpawnAlly3(void) : "Spawn Ally 3"
	output SpawnAlly4(void) : "Spawn Ally 4"
	output SpawnAlly5(void) : "Spawn Ally 5"
	output SpawnAlly6(void) : "Spawn Ally 6"
	output SpawnAlly7(void) : "Spawn Ally 7"
	output SpawnAlly8(void) : "Spawn Ally 8"
	output SpawnAlly9(void) : "Spawn Ally 9"

	output OnZeroAllies(void) : "Fires when there are no more allies"
	output OnZeroMedicAllies(void) : "Fires when there are no more allies"
]

@BaseClass base(Targetname) = LeadGoalBase
[
	actor(target_name_or_class) : "Actor(s) to affect"
	goal(string) : "Target Entity"
	WaitPointName(target_destination) : "Point to wait at if the target's not visible"
	WaitDistance(float) : "Wait until player gets this close"
	LeadDistance(float) : "Lead Distance" : "64" : "The player is considered to be lagging if he's beyond this distance.  The Actor will consider retrieving when the player is 4x 'Lead Distance' away."
	RetrieveDistance(float) : "Retrieve Distance" : "96" : "The distance from the player that the NPC should return to when retrieving a lagging player. Must be between ('Lead Distance' + 24) and ('Lead Distance' * 4) to avoid the leader ping-ponging."
	SuccessDistance(float) : "Success Distance" : "0" : "The distance from the player (to the NPC) that the player must be within for the Lead to succeed, once the NPC has reached the goal. If set to 0, it'll use the lead distance instead (for legacy support)."
	Run(choices) : "Run instead of Walk" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	Retrieve(choices) : "Retrieve player?" : 1 =
	[
		0 : "No, just idle and wait"
		1 : "Yes, move to retrieve"
	]	
	ComingBackWaitForSpeak(choices) : "Before Coming Back, Wait for speech?" : 1 =
	[
		0 : "No, come back while speaking"
		1 : "Yes, wait for speech to finish"
	]
	RetrieveWaitForSpeak(choices) : "On Retrieve, Wait for speech?" : 1 =
	[
		0 : "No, start leading while speaking"
		1 : "Yes, wait for speech to finish"
	]
	DontSpeakStart(choices) : "Speak start greeting?" : 0 =
	[
		0 : "Yes, speak the start greeting"
		1 : "No, don't speak the greeting"
	]
	LeadDuringCombat(choices) : "Lead during combat?" : 0 =
	[
		0 : "No. Stop to fight, resume leading when safe."
		1 : "Yes, lead while fighting."
	]
	GagLeader(choices) : "Gag Leader?" : 0 =
	[
		0 : "No. Speak lead concepts normally, respecting other lead speech settings."
		1 : "Yes, don't speak any lead concepts at all, overriding all other lead speech settings."
	]
	
	AttractPlayerConceptModifier(string)	: "Attract player concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ATTRACTPLAYER' concept is spoken."
	WaitOverConceptModifier(string)		: "Player wait over concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_WAITOVER' concept is spoken."
	ArrivalConceptModifier(string)		: "Arrival concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ARRIVAL' concept is spoken."
	PostArrivalConceptModifier(string)	: "Post-arrival concepts modifier"
	SuccessConceptModifier(string)		: "Success concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_SUCCESS' concept is spoken."
	FailureConceptModifier(string)		: "Failure concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'lead_fail' concept is spoken."
	ComingBackConceptModifier(string)	: "Coming Back concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_RETRIEVE' concept is spoken. Spoken as the NPC starts returning to the player to retrieve him."
	RetrieveConceptModifier(string)		: "Retrieve concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_COMINGBACK' concept is spoken. Spoken when NPC has finally reached the player to retrieve him."
	
	// Spawnflags
	spawnflags(Flags) = 
	[
		1 : "No def success" : 0
		2 : "No def failure" : 0
		4 : "Use goal facing" : 1
	]

	// Inputs
	input Activate( void )  : "Begin the leading behavior"
	input Deactivate( void )  : "Stop the leading behavior"
	
	input SetSuccess( void ) : "Notify success of leading"
	input SetFailure( void ) : "Notify failure of leading"
	
	// Outputs
	output OnArrival( void ) : "Fires when NPC reaches the lead point"
	output OnArrivalDone( void ) : "Fires when NPC has played out any arrival speech"
	output OnSuccess( void ) : "Fires when NPC achieves the goal"
	output OnFailure( void ) : "Fires when NPC fails to achieves the goal"
	output OnDone( void ) : "Fires when NPC completes behavior (any post-success or fail acting is complete)"
]

@PointClass base(LeadGoalBase) iconsprite("editor/ai_goal_lead.vmt") = ai_goal_lead : "AI Goal Lead"
[
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	]
]

@PointClass base(LeadGoalBase) iconsprite("editor/ai_goal_lead.vmt") = ai_goal_lead_weapon : 
	"AI Goal Lead (Weapon). A version of the ai_goal_lead entity that requires the player to have the specified weapon before the Actor(s) will lead the player to their target."
[
	WeaponName(choices) : "Weapon" : "weapon_bugbait" =
	[
		"weapon_bugbait" : "Bugbait"
		"weapon_smg1" : "SMG1"
		"weapon_ar2"  : "AR2"
	]

	MissingWeaponConceptModifier(string) : "Missing weapon concept modifier"
	
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 
]

@BaseClass base(Targetname) = FollowGoal
[
	actor(target_name_or_class) : "Actor(s) to affect"
	goal(string) : "Target Entity" : : "The name of the entity to follow. If blank, and the actor likes the player, then defaults to player"

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	MaximumState(choices) : "Maximum state" : 1 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]

	Formation(choices) : "Formation" : 0 =
	[
		0 : "Close circle"
		1 : "Wide circle"
		5 : "Medium circle"
		6 : "Sidekick"
		8 : "Vortigaunt"
	]

	// Inputs
	input Activate( void ) : "Begin the follow behavior"
	input Deactivate( void ) : "Cease the follow behavior"
]

@PointClass base(FollowGoal) iconsprite("editor/ai_goal_follow.vmt") = ai_goal_follow : "AI Goal Follow"
[
]

@PointClass base(FollowGoal) iconsprite("editor/ai_goal_follow.vmt") = ai_goal_injured_follow : "AI Goal Injured Follow"
[
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Angles, Parentname) studio("models/pigeon.mdl") = ai_battle_line : "Battle line"
[																									  
	// Spawnflags
	spawnflags(Flags) = 
	[
		1 : "Use parent's orientation" : 0
	]

	actor(target_name_or_class) : "Actor(s) or squad to affect"

	Active(choices) : "Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	Strict(choices) : "Strict" : 1 : "Player orders can override, applies to allies only" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Activate(void)
	input Deactivate(void)
]

@PointClass base(Targetname) iconsprite("editor/ai_goal_standoff.vmt") = ai_goal_standoff : "AI Goal Standoff"
[
	actor(target_name_or_class) : "Actor(s) to affect"
//	goal(string) : "Target Entity (self by default) [NOT IMPLEMENTED]"

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	HintGroupChangeReaction(Choices) : "Reaction to tactical change" : 1 : "What to do if leader moves, threat is neutralized, hint group changes, etc" =
	[
		0 : "Move when ready (default AI)"
		1 : "Move when seek cover"
		2 : "Move immediately"
	]

	Aggressiveness(Choices) : "Aggressiveness" : 2 =
	[
		0 : "Very low"
		1 : "Low"
		2 : "Medium"
		3 : "High"
		4 : "Very High"
		// Custom agression disabled
		// 		100 : "Custom"
	]

	PlayerBattleline(choices) : "Player battleline" : 1 : "Player defines a battle line, applies to allies only" =
	[
		0 : "No"
		1 : "Yes"
	]

	StayAtCover(choices) : "Stay at cover location" : 0 : "When have suitable cover, don't change it (disables advancing to battle line)" =
	[
		0 : "No"
		1 : "Yes"
	]

	AbandonIfEnemyHides(choices) : "Abandon if enemies hide" : 0 : "If no enemy detected recently, stop the standoff" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Custom aggression
//	CustomCoverOnReload(choices) : "Custom: Take cover to reload" : 1 =
//	[
//		0 : "No"
//		1 : "Yes"
//	]
//	CustomMinTimeShots(float) : "Custom: Min time wait to shoot"	  : 2 : "Minimum duration of time after a burst of shooting before trying again"
//	CustomMaxTimeShots(float) : "Custom: Max time wait to shoot"	  : 4 : "Minimum duration of time after a burst of shooting before trying again"
//	CustomMinShots(integer) : "Custom: Min shots in a burst"	  : 1
//	CustomMaxShots(integer) : "Custom: Max shots in a burst"	  : 4
//	CustomOddsCover(integer) : "Custom: Odds cover on damage"	  : 25 : "If damaged, the chances react by taking immediate cover"

	// Inputs
	input Activate( void ) : "Begin contesting position"
	input Deactivate( void ) : "Cease contesting position"
	input SetAggressiveness(integer) : "Set aggressiveness"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/assault_rally.vmt") line(255 255 255, targetname, assaultpoint) = assault_rallypoint : 
	"(Assault) rally point"
[
	assaultpoint(target_destination)  : "Assault Point" : "" : "Location to move to as assault begins"
	assaultdelay(float) : "Assault Delay" : 0 : "How long to wait after cue is given before assault begins."
	rallysequence(string) : "Rally Sequence" : "" : "Override the NPC's wait activity by entering a sequence name."
	priority(integer) : "Priority" : 1 : "Higher priority rally points get selected first."

	forcecrouch(choices) : "Force Crouch" : 0 : "NPCs using this assault point are forced into crouching while holding it." =
	[
		0 : "No"
		1 : "Yes"
	]

	urgent(choices) : "Urgent" : 0 : "If true, NPCs will consider movement to this rally point as Urgent Navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnArrival(void) : "Fires when the NPC reaches this rally point"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/assault_point.vmt") line(255 255 255, targetname, nextassaultpoint) = assault_assaultpoint : 
	"(Assault) assault point"
[
	assaultgroup(string)  : "Assault Hint Group" : "" : "NPC's movements are constrained to this hint group once assault has begun"
	nextassaultpoint(target_destination) : "Next assault point (optional)"
	assaulttimeout(float) : "Assault time out" : "3.0" : "This point is cleared when no enemies are seen for this long (seconds)"
	clearoncontact(choices) : "Clear on contact with enemies" : 0 : "If you come in contact with enemies while approaching the assault point, clear our assault point" =
	[
		0 : "No"
		1 : "Yes"
	]
	allowdiversion(choices) : "Allow diversion" : 0 : "If you come in contact with enemies while approaching the assault point, divert to kill them. Resume the assault once contact is lost." =
	[
		0 : "No"
		1 : "Yes"
	]

	allowdiversionradius(float) : "Diversion Proximity" : 0 : "If Allow Diversion is set, NPC will only divert from assault to attack an enemy that is within this distance of the assault point. 0 = No limit."

	nevertimeout(choices) : "Never Timeout" : 0 : "If set, the assault never ends for NPCs assaulting this point. Useful for forcing NPCs back to a point." =
	[
		0 : "No"
		1 : "Yes"
	]

	strict(choices) : "Strict?" : 0 =
	[
		0 : "No, NPC may move from point to attack"
		1 : "Yes, NPC may not move to attack"
	]

	spawnflags(Flags) = 
	[
		1 : "Clear this point upon arrival, UNCONDITIONALLY" : 0
	]

	forcecrouch(choices) : "Force Crouch" : 0 : "NPCs using this assault point are forced into crouching while holding it." =
	[
		0 : "No"
		1 : "Yes"
	]

	urgent(choices) : "Urgent" : 0 : "If true, NPCs will consider movement to this assault point as Urgent Navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	assaulttolerance(choices) : "Attack Tolerance" : 36 : "How far this NPC may move from the assault point to try to attack an enemy." =
	[
		36 : "Tight (3ft)"
		72 : "Medium (6ft)"
		120 : "Large (10ft)"
	]


	// Inputs
	input SetClearOnContact(integer) : "Set the clear on contact flag. NPCs who spot enemies while running to the assault point, or while waiting at it, will immediately Clear it."
	input SetAllowDiversion(integer) : "Set the allow diversion flag. NPCs who spot enemies whil running to the assault point, or while waiting on it, will divert away (leave Assault mode) to deal with the enemies. Upon losing enemies, they'll go back to Assault mode, and return to this assault point."
	input SetForceClear(integer) : "Set the Force Clear flag. NPCs who are currently running to the assault point will Clear it immediately. NPCs who acquire it in the future will Clear it automatically."

	// Outputs
	output OnArrival(void) : "Fires when the NPC reaches this assault point"
	output OnAssaultClear(void) : "Fires when this assault point is cleared of enemies"
]

@PointClass base(Targetname) = ai_goal_assault : 
	"AI Goal Assault"
[
	actor(target_name_or_class) : "Actor(s) to affect" : "" : "NPC's that should perform this assault"
	rallypoint(target_destination) : "Rally Point Set" : "" : "Root name of rally points for this assault. Use an asterisk '*' after the root name to match all with the same root."

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	AssaultCue(choices) : "Assault Cue" : 1 =
	[
		1 : "Entity System Input"
		2 : "Gunfire"
		3 : "Don't wait for a cue."
	]

	RallySelectMethod(choices) : "Rally Point Selection Method" : 0 = 
	[
		0 : "Priority, Distance (default)"
		1 : "Random"
	]


	// Inputs
	input Activate( void ) : "Begin the assault behavior"
	input Deactivate( void ) : "Cease the assault behavior"
	input BeginAssault( void ) : "Begin assault phase"
]

@BaseClass base(Targetname) = BaseActBusy
[
	actor(target_name_or_class) : "Actor(s) to affect" : "" : "NPC's that should act busy"

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	busysearchrange(float) : "Search Range for Busy Hints" : 2048
	visibleonly(choices) : "Visible Busy Hints Only" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Activate( void ) : "Begin acting busy"
	input Deactivate( void ) : "Cease acting busy"
	input SetBusySearchRange( float ) : "Update the busy search range for all actors."
	input ForceNPCToActBusy( string ) : "Force an NPC to act busy. Takes parameters, separated by spaces: <Targetname> <hint node targetname> <optional:teleport> <optional:$customactivityorsequence> <maximum time to actbusy>. If no hint node targetname is specified, it'll search for a random one. If no max time is specified, it'll use the default. Specifying 0 as the max time will make the NPC act busy until disturbed. If the optional teleport parameter is specified, the NPC will teleport to the act busy point. A custom move animation can be specified by prepending $ to the name of it. i.e. $ACT_RUN will make the NPC Run. Sequence names can be used instead of activities."
	input ForceThisNPCToActBusy( string ) : "Force an NPC outputted from another entity to act busy. (only usable from an output that specifies an entity)"
	input ForceThisNPCToLeave( string ) : "Force an NPC outputted from another entity to find a HINT_NPC_EXIT_POINT hintnode and vanish."

	// Outputs
	output OnNPCStartedBusy(string) : "Fired when an NPC targeted by this goal starts an ActBusy animation."
	output OnNPCFinishedBusy(string) : "Fired when an NPC targeted by this goal finishes an ActBusy."
	output OnNPCLeft(string) : "Fired when an NPC target by this goal finishes a forced Leave."
]

@PointClass base(BaseActBusy) = ai_goal_actbusy : "AI Goal Act Busy"
[
	seeentity(target_name_or_class) : "Sight Entity" : "" : "The Sight Entity (if you provide one) is an entity that will leave the current ActBusy if the Actor playing the ActBusy loses sight of it for the amount of time specified in 'Sight Entity Timeout'. THIS MAY ONLY BE A TARGET NAME. NO CLASSNAMES."

	seeentitytimeout(string) : "Sight Entity Timeout" : "1" : "If you provide a Sight Entity, the Actor will leave the current ActBusy if the Actor has lost sight of Sight Entity for this many seconds."

	sightmethod(choices) : "Sight Enemy Method" : 0 : "The method to use to determine whether the Sight enemy is visible." = 
	[
		0 : "Default. LOS -and- Viewcone"
		1 : "LOS Only. Disregard Viewcone"
	]


	type(choices) : "Actbusy Type" : 0 =
	[
		0 : "Default (Standard)"
		1 : "Combat"
	]

	safezone(target_destination) : "Combat Safe Zone" : "" : "Only for combat actbusy. Lets you specify a volume which is the 'safe zone'. The Combat ActBusy will cancel if any enemies are seen in the safe zone."


	allowteleport(choices) : "Allow actor to teleport?" : 0 =
	[
		0 : "No"
		1 : "Yes (Only for Combat Actbusy)"
	]

	output OnNPCLostSeeEntity(void) : "Fired when the NPC loses sight of the see entity (if one is specified)."
	output OnNPCSeeEnemy(void)  : "Fired when this NPC leaves his actbusy because of sighting an enemy."
]

@PointClass base(BaseActBusy) = ai_goal_actbusy_queue : "AI Goal Act Busy Queue"
[
	node_exit(target_destination) : "Exit Node" : "" : "The name of the node the first NPC in the queue should move to when he leaves the head of the queue."
	node01(target_destination) : "Node 1" : "" : "The name of the first actbusy hint node in the queue."
	node02(target_destination) : "Node 2" : "" : "The name of the second actbusy hint node in the queue."
	node03(target_destination) : "Node 3" : "" : "The name of the third actbusy hint node in the queue."
	node04(target_destination) : "Node 4" : "" : "The name of the fourth actbusy hint node in the queue."
	node05(target_destination) : "Node 5" : "" : "The name of the fifth actbusy hint node in the queue."
	node06(target_destination) : "Node 6" : "" : "The name of the sixth actbusy hint node in the queue."
	node07(target_destination) : "Node 7" : "" : "The name of the seventh actbusy hint node in the queue."
	node08(target_destination) : "Node 8" : "" : "The name of the eighth actbusy hint node in the queue."
	node09(target_destination) : "Node 9" : "" : "The name of the ninth actbusy hint node in the queue."
	node10(target_destination) : "Node 10" : "" : "The name of the tenth actbusy hint node in the queue."
	node11(target_destination) : "Node 11" : "" : "The name of the eleventh actbusy hint node in the queue."
	node12(target_destination) : "Node 12" : "" : "The name of the twelfth actbusy hint node in the queue."
	node13(target_destination) : "Node 13" : "" : "The name of the thirteenth actbusy hint node in the queue."
	node14(target_destination) : "Node 14" : "" : "The name of the fourteenth actbusy hint node in the queue."
	node15(target_destination) : "Node 15" : "" : "The name of the fifteenth actbusy hint node in the queue."
	node16(target_destination) : "Node 16" : "" : "The name of the sixteenth actbusy hint node in the queue."
	node17(target_destination) : "Node 17" : "" : "The name of the seventeenth actbusy hint node in the queue."
	node18(target_destination) : "Node 18" : "" : "The name of the eighteenth actbusy hint node in the queue."
	node19(target_destination) : "Node 19" : "" : "The name of the nineteenth actbusy hint node in the queue."
	node20(target_destination) : "Node 20" : "" : "The name of the twentieth actbusy hint node in the queue."
	 
	mustreachfront(choices) : "Must Reach Front" : 0 : "If true, NPCs much reach the front node in the queue before they're allowed to leave the queue." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input PlayerStartedBlocking(float) : "Tell the queue manager that the player has started blocking a spot in the queue."
	input PlayerStoppedBlocking(float) : "Tell the queue manager that the player has stopped blocking a spot in the queue."
	input MoveQueueUp(void) : "Force the queue to move up, sending the front-most NPC out of the queue."

	// Outputs
	output OnQueueMoved(float) : "Fired when the queue moves. Outputs the number of NPCs left in the queue."
	output OnNPCStartedLeavingQueue(string) : "Fired when the NPC at the head of the queue starts to leave. The activator is the NPC, and the string is the name of the NPC."
	output OnNPCLeftQueue(string) : "Fired when the NPC at the head of the queue leaves. The activator is the NPC, and the string is the name of the NPC."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = ai_changetarget : "Change Target"
[
	target(target_destination) : "Target entity" : : "Name of entity whose target will be changed."
	m_iszNewTarget(string) : "New Target"

	// Inputs
	input Kill( void ) : "Removes this entity from the world"
	input Activate( void ) : "Changes the entities target"
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = ai_npc_eventresponsesystem : "An entity that allows you to generate events for nearby friendly NPCs to respond to."
[
	input TriggerResponseEvent(string) : "Fire an NPC Response Event. The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
	input ForceTriggerResponseEvent(string) : "Fire an NPC Response Event, and force the first available NPC to speak the response (breaking them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
	input ForceTriggerResponseEventNoCancel(string) : "Fire an NPC Response Event, and force the first available NPC to speak the response (but don't break them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
]
@PointClass base(Targetname) sphere(Radius)  size(-8 -8 -8, 8 8 8) = ai_changehintgroup : "Change Hint Group"
[
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities to change." = 
	[
		0 : "Entity Name"
		1 : "Classname"
		2 : "Old Hint Group"
	] 
	SearchName(string) : "Name to search for"
	NewHintGroup(string) : "New Hint Group"
	Radius(string) : "Search Radius" : "0.0" : "Radius to search (0 for all of map)"
	hintlimiting(choices) : "Hint Limit Nav" : 0 : "Limits NPC to using specified hint group for navigation requests, does not limit local navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	input Kill( void ) : "Removes this entity from the world"
	input Activate( void ) : "Change the Hint Group"
]



@PointClass base(Targetname) = ai_script_conditions : "AI Script Conditions"
[
	Actor(target_destination) : "Actor" : : "NPC Target"
	
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	MinimumState(choices) : "Minimum state" : 1 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]

	MaximumState(choices) : "Maximum state" : 3 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]
	
	ScriptStatus(choices) : "Actor is running a script?" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
		
	RequiredTime(float) : "Required Time"	  : 0 : "Duration of time that all the conditions must be true"
	MinTimeout(float) : "Minimum time out"  : 0 : "Minimum time before OnConditionsTimeout is fired. 0 = never expire."
	MaxTimeout(float) : "Maximum time out"  : 0 : "Maximum time before OnConditionsTimeout is fired. 0 = ignore (If you don't specify a Maximum timeout, conditions will time out at exactly Minimum Time Out. If you DO specify a Maximum time out, timeout will occur randomly between Minimum and Maximum time out values.)"
	
	ActorSeePlayer(choices) : "Actor Sees Player" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	PlayerActorProximity(float) : "Player distance"  : 0 : "The distance the player must/must not be to the actor. Negative values for NOT, 0 for ignore."
	PlayerActorFOV(float) : "Player FOV for Actor " : 360 : "Specify angle of view cone in degrees. Negative value = NOT"
	PlayerActorFOVTrueCone(choices ) : "Play FOV to Actor is a true view cone" : 0 : "Player's view cone is evaluated as a true cone, not pie slice " = 
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]

	PlayerActorLOS(choices) : "Player has LOS to Actor" : 2 : "Checks that the player has clear Line of Sight to the Actor" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]


	target(target_destination) : "Target (Optional)" : : "Optional entity to include in conditions"
	ActorSeeTarget(choices)  : "Actor Sees Target" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorTargetProximity(float) : "Target distance"  : 0 : "The distance the actor must/must not be to the Target. Negative values for NOT, 0 for ignore."
	PlayerTargetProximity(float) : "Player distance from Target"  : 0 : "The distance the player must/must not be to the Target. Negative values for NOT, 0 for ignore."
	PlayerTargetFOV(float) : "Player FOV for Target" : 360 : "Specify angle of view cone in degrees. Negative value = NOT"
	PlayerTargetFOVTrueCone(choices ) : "Play FOV to Target is a true view cone" : 0 : "Player's view cone is evaluated as a true cone, not pie slice " = 
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]

	PlayerTargetLOS(choices) : "Player has LOS to Target" : 2 : "Checks that the player has clear Line of Sight to the Target" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	
	PlayerBlockingActor(choices) : "Player blocking Actor" : 2 : "Checks that the player is blocking the Actor's path" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorInPVS(choices)	: "Actor in Player's PVS" : 2 : "Checks that the actor is in the player's PVS" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorInVehicle(choices)	: "Actor in a vehicle" : 2 : "Checks the actor's state in a vehicle" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	PlayerInVehicle(choices)	: "Player in a vehicle" : 2 : "Checks the player's state in a vehicle" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	spawnflags(Flags) = 
	[
		1 : "Fire outputs with the Actor as Activator"	: 0
	]

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output OnConditionsSatisfied(void) : "Fires when AI conditions satisfied"
	output OnConditionsTimeout(void)   : "Fires when AI conditions timed out"
	output NoValidActor(void) : "Fires if/when there are no matching actors in the map."
]

@PointClass base(BaseScripted, Angles, DXLevelChoice) studio("models/editor/scriptedsequence.mdl") sphere(m_flRadius) = scripted_sequence :
	"Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or can "+
	"be told to play the script wherever they currently are. "+
	"Multiple scripted sequences of the same name will frame-synchronize in the action animation once all the actors have moved to position. "+
	"This allows tight interaction between actors (one actor grabbing another, hitting them, etc.) The flow is as follows:\n\n"+
	"1) Move to position using the specified movement animation. If 'Move to Position' is set to NONE, skip to step 2.\n"+
	"2) If forced to wait for another actor to move to position, play the pre-action idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n"+
	"3) Fire the OnBeginSequence output.\n"+
	"4) Play the action animation. If no action animation is specified, skip to step 5.\n"+
	"5) Play the post-action idle animation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle until the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n"+
	"6) Fire the OnEndSequence output.\n"+
	"7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\n"+
	"The MoveToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is received.\n\n"+
	"If the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag."
[
	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 0
		8 : "Leave Corpse" : 0
		16 : "Start on Spawn" : 0
		32: "No Interruptions" : 0
		64: "Override AI" : 0
		128: "Don't Teleport NPC On End" : 0
		256: "Loop in Post Idle" : 0
		512: "Priority Script" : 0
		4096: "Allow actor death" : 0
	]

	
	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
]


@PointClass base(Targetname) sphere(m_flRadius) color(255 0 255) iconsprite("editor/aiscripted_schedule") = aiscripted_schedule :
	"Issues a command to an NPC without taking the NPC out of its AI. This does not seize control of the NPC as " +
	"a scripted_sequence does" 
[
	m_iszEntity(target_destination) : "Target NPC" : : "The name or classname of an NPC to use."
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	graball(choices)  : "All in radius" : 0: "Whether to grab all matching NPCs in the specified radius, instead of just one"  =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 1
		1024 : "Search Cyclically" : 0
		2048 : "Don't Complain" : 0
	]

	forcestate(choices) : "AI state to set" : 0 =
	[
		0 : "<None>"
		1 : "Set state to IDLE"
		2 : "Set state to ALERT"
		3 : "Set state to COMBAT"
	]
		
	schedule(choices) : "Schedule to run" : 1 =
	[
		0 : "<None>"
		1 : "Walk to Goal Entity"
		2 : "Run to Goal Entity"
		3 : "Set enemy to Goal Entity"
		4 : "Walk Goal Path"
		5 : "Run Goal Path"
		6 : "Set enemy to Goal Entity AND Run to Goal Entity"
	]
	
	interruptability(choices) : "Interruptability" : 0 =
	[
		0 : "General"
		1 : "Damage or Death"
		2 : "Death"
	]

	goalent(target_destination) : "Goal entity" : : "Provides the name of a schedule-specific goal entity (see 'Schedule to run')"

	// Inputs
	input StartSchedule(void) : "Starts the scripted schedule. This will first locate an NPC that " +
		"matches the given target, then tell the NPC to run the specified schedule."
]
//-------------------------------------------------------------------------
//
// Solid Entities
//
//-------------------------------------------------------------------------
@SolidClass base(Parentname, Targetname, Global) = func_vehicleclip: "Vehicle Clip" 
[
	input Kill( void ) : "Removes this entity from the world"
	input Enable( void ) : "Enable collisions with vehicles"
	input Disable( void ) : "Disable collisions with vehicles"
]

@SolidClass base(func_movelinear) = func_lookdoor : "A door that moves either when looked by a targeted object or when " +
	"a target object comes near the door.  Behavior can be either based on viewing direction or proximity " +
	"alone, or on a combination of both.  If inverted the doors behavior will be the opposite." 
[
	spawnflags(flags) =
	[
		8192  : "LookDoor Threshold" : 0
		16384 : "LookDoor Invert" : 0
		32768 : "LookDoor From Open" : 0
	]

	ProximityDistance(string) : "Proximity Distance" : "0.0"  : "If non-zero, proximity range over which door will move"
	ProximityOffset(string) : "Proximity Offset" : "0.0" : "Offset from the target object"
	FieldOfView(string) : "FieldOfView" : "0.0"  : "If non-zero, field of view over which door will move"

	// Input
	input InvertOn(void) : "InvertOn - when set behavior of door is inverted."
	input InvertOff(void) : "InvertOff - when set behavior of door is normal."
]

//-------------------------------------------------------------------------
//
// Point Entities
//
//-------------------------------------------------------------------------

@PointClass base(EnvGlobal) size(-8 -8 -8, 8 8 8) = env_global : 
	"An entity to control a game-specific global states."
[
	globalstate(choices) : "Global State to Set" =
	[
		"gordon_precriminal" : "Gordon pre-criminal" 
		"antlion_allied" : "Antlions are player allies" 
//		"player_stealth" : "Player in APC is disguised as combine" 
		"suit_no_sprint" : "Suit sprint function not yet enabled" 
		"super_phys_gun" : "Super phys gun is enabled" 
		"friendly_encounter" : "Friendly encounter sequence (lower weapons, etc.)"
//		"citizens_passive" : "Citizens are *not* player allies (cannot be commanded)"
		"gordon_invulnerable" : "Gordon is invulnerable"
		"no_seagulls_on_jeep" : "Don't spawn seagulls on the jeep"
		"ep2_alyx_injured" : "Episode 2: Alyx injured"
		"ep_alyx_darknessmode" : "Episodic: Alyx darkness mode"
		"hunters_to_run_over" : "Ep2 Counter: Hunters to run over before they dodge"
	]
]

//-------------------------------------------------------------------------
//
// Items
//
//-------------------------------------------------------------------------
@BaseClass color(0 0 200) base(Targetname, Angles, Shadow) sphere(fademindist) sphere(fademaxdist) = Item
[
	output OnPlayerTouch(void) : "Fires when the player touches this object"

	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this item. Fires on: Player Touch (whether or not player actually acquires the item), Picked up by +USE, Picked up by Physcannon, Punted by Physcannon."

	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified." +
												 " This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades." +

	spawnflags(Flags) =
	[
		1 : "Start Constrained" : 0
	]
]

// Weapons
//
//-------------------------------------------------------------------------
@SolidClass base(Trigger) = trigger_vphysics_motion :
	"A volumetric trigger that affects the motion of vphysics objects that touch it."
[
	spawnflags(Flags) =
	[
		4096 : "Can move (through hierarchical attachment)" : 0
	]

	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	
	SetGravityScale(float) : "Scale gravity of objects in the field." : "1.0"
	input SetGravityScale(float) : "Scale gravity of objects in the field."

	SetAdditionalAirDensity(float) : "Additional air density for drag" : "0"
	input SetAdditionalAirDensity(float) : "Additional air density for drag"

	SetVelocityLimit(float) : "Max velocity in field (0 disables)" : "0.0"
	input SetVelocityLimit(float) : "Max velocity in field."

	SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second when it exceeds the velocity limit (0 disables)" : "0.0"
	input SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second"

	input SetVelocityLimitTime(string) : "Accepts two arguments: the first is the new velocity limit, the second is the time it takes to ramp to that value"

	SetVelocityScale(float) : "Velocity scale/drag" : "1.0"
	input SetVelocityScale(float) : "Velocity scale/drag"

	SetAngVelocityLimit(float) : "Max angular velocity in field (degrees/s, 0 disables)" : "0.0"
	input SetAngVelocityLimit(float) : "Max angular velocity in field."

	SetAngVelocityScale(float) : "Angular Velocity scale/drag" : "1.0"
	input SetAngVelocityScale(float) : "Angular Velocity scale/drag"

	SetLinearForce(float) : "Linear force (0 disables)" : "0.0"
	input SetLinearForce(float) : "Linear force (0 disables)"

	SetLinearForceAngles(angle) : "Direction of linear force (Pitch Yaw Roll (Y Z X))" : "0 0 0"
//	input SetLinearForceAngles(angle) : "Direction of linear force (Pitch Yaw Roll (Y Z X))"

	ParticleTrailMaterial(string) : "Particle Trail Material" : : "Name of a material to use for the particle trail, no name means no particle trail"
	ParticleTrailLifetime(float) : "Particle Trail Lifetime" : 4 : "Lifetime of the particles to emit"
	ParticleTrailStartSize(float) : "Particle Trail Starting Sprite Size" : 2 : "Starting size of the sprite to emit"
	ParticleTrailEndSize(float) : "Particle Trail Ending Sprite Size" : 3 : "Ending size of the sprite to emit"

	// Inputs
	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
	input	Toggle(void) : "Toggle enable/disable."
]

@PointClass base(Targetname, Angles) size(16 16 16) line(255 255 255, targetname, target) color(247 181 82) = path_corner : "Generic path point"
[
	spawnflags(Flags) =
	[
		1: "Wait for retrigger" : 0
		2: "Teleport to THIS path_corner" : 0
	]
	target(target_destination) : "Next stop target"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0

	// Inputs 
	input SetNextPathCorner(string) : "Sets next pathcorner"

	// Outputs
	output OnPass(void) : "Fires when a path follower passes this point"
]
//-------------------------------------------------------------------------
//
// Logic Entities
//
//-------------------------------------------------------------------------
@PointClass color(0 0 255) base(Targetname) iconsprite("editor/choreo_scene.vmt") = logic_choreographed_scene :
	"Manages a choreographed scene of one or more actors."

[
	// Keys
	SceneFile(scene) : "Scene file"

	// Links
	target1(target_destination) : "Target 1"
	target2(target_destination) : "Target 2"
	target3(target_destination) : "Target 3"
	target4(target_destination) : "Target 4"
	target5(target_destination) : "Target 5"
	target6(target_destination) : "Target 6"
	target7(target_destination) : "Target 7"
	target8(target_destination) : "Target 8"

	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this scene needs is already talking when this scene is told to start." =
	[
		0: "Start immediately"
		1: "Wait for actor to finish"
		2: "Interrupt at next interrupt event"
		3: "Cancel at next interrupt event"
	]

	// Inputs
	input Start(void) : "Starts playback of the scene file"
	input Pause(void) : "Pauses playback of the scene file"
	input Resume(void) : "Resumes playback of the scene if it has been paused"
	input Cancel(void) : "Cancels playback of the scene"
	input CancelAtNextInterrupt(void) : "Cancels playback of the scene at the next interrupt event in the scene."
	input PitchShift(float) : "Multiplies the the pitch"

	input InterjectResponse(string) : "Finds an actor who can respond to the specified concept string while the scene continues playing"

	input StopWaitingForActor(void) : "Stop waiting on an actor to stop talking."

	// Outputs
	output OnStart(void) : "The scene has started"
	output OnCompletion(void) : "The scene has completed"
	output OnCanceled(void) : "The scene has been canceled"
	output OnTrigger1(void) : "Scene trigger 1"
	output OnTrigger2(void) : "Scene trigger 2"
	output OnTrigger3(void) : "Scene trigger 3"
	output OnTrigger4(void) : "Scene trigger 4"
	output OnTrigger5(void) : "Scene trigger 5"
	output OnTrigger6(void) : "Scene trigger 6"
	output OnTrigger7(void) : "Scene trigger 7"
	output OnTrigger8(void) : "Scene trigger 8"
	output OnTrigger9(void) : "Scene trigger 9"
	output OnTrigger10(void) : "Scene trigger 10"
	output OnTrigger11(void) : "Scene trigger 11"
	output OnTrigger12(void) : "Scene trigger 12"
	output OnTrigger13(void) : "Scene trigger 13"
	output OnTrigger14(void) : "Scene trigger 14"
	output OnTrigger15(void) : "Scene trigger 15"
	output OnTrigger16(void) : "Scene trigger 16"

	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
]

@PointClass color(0 0 255) base(Targetname) iconsprite("editor/choreo_manager.vmt") = logic_scene_list_manager :
	"Manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inputs. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_list_manager can be entered in a slot instead of an invididual scene, which will cause all scenes in that manager to be removed when a later scene in this list is played."
[
	scene0(target_destination) : "Scene 1" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene1(target_destination) : "Scene 2" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene2(target_destination) : "Scene 3" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene3(target_destination) : "Scene 4" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene4(target_destination) : "Scene 5" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene5(target_destination) : "Scene 6" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene6(target_destination) : "Scene 7" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene7(target_destination) : "Scene 8" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene8(target_destination) : "Scene 9" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene9(target_destination) : "Scene 10" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene10(target_destination) : "Scene 11" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene11(target_destination) : "Scene 12" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene12(target_destination) : "Scene 13" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene13(target_destination) : "Scene 14" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene14(target_destination) : "Scene 15" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene15(target_destination) : "Scene 16" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."

	// Inputs
	input Shutdown(void) : "Remove the manager and all scenes referenced by it (and all scenes referenced by logic_scene_list_manager's embedded in this one)."
]

@PointClass base(Targetname, Parentname) sphere(volume) iconsprite("editor/ai_sound.vmt") = ai_sound :
	"This entity makes sounds or smells that can be sensed by NPCs, butnot by the player. This can be used " +
	"to cause reactions in nearby NPCs.\n\n" +
	"Sound Types\n" +
	"  Combat: Will cause most NPCs to become alert\n" +
	"  World: Will cause most NPCs to become alert\n" +
	"  Danger: Will cause most NPCs to move away from the position of the sound\n" +
	"  Bullet Impact: \n" +
	"  Carcass: \n" +
	"  Meat: \n" +
	"  Garbage: \n" +
	"  Thumper: causes antlions to run away briefly\n" +
	"  Readiness: (Low, Medium, High) Causes player companions that can hear this sound to change readiness\n"
[
	//input InsertSound(Integer) : "THIS IS NOW OBSOLETE. Use InsertAISound"
	input EmitAISound(void) : "Make the sound."

	volume(integer) : "Volume" : 120 : "How far away this sound can be heard. This is a radius."
	duration(float) : "Duration" : "0.5" : "How long the sound persists each time you insert it."

	soundtype(choices) : "Sound Type" : 0 : "The type of sound or smell will determine the reaction of NPCs that sense it." =
	[
		0: "Select one"
		1: "Combat"
		2: "World"
		//4: "Player (Don't use)"
		8: "Danger"
		16: "Bullet Impact"
		32: "Carcass"
		64: "Meat"
		128: "Garbage"
		256: "Thumper"
		4096: "Move Away - Most NPCs will clear the radius of this sound when heard."
		16384 : "Readiness - Low"
		32768 : "Readiness - Medium"
		65536 : "Readiness - High"
	]

	soundcontext(choices) : "Additional sound context (optional)" : 0 : "Optional settings specifying such things as who can or cannot hear the sound." =
	[
		0 : "Select one"
		8388608 : "Only Combine hear"
		67108864 : "Combine cannot hear"
	]

	locationproxy(target_destination) : "Location Proxy" : "" : "The name of an entity to use as a proxy to determine the location at which to make the sound. If you specify an entity here, the sound will be made at that entity's location (!player included)" 
]


@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) = env_rotorwash : "Rotorwash Effect"
[
	spawnflags(Flags) =
	[
		1 : "Ignore solid" : 0
	]

	input DoEffect(Void) : "Make a rotor puff"
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) = env_ar2explosion :
	"AR2 explosion visual effect. Big, volume-filling brown cloud. Does not cause damage or emit sound."
[
	input Explode(Void) : "Make the explosion effect."
	material(material) : "Particle Material" : "particle/particle_noisesphere" : "The material to use for each particle in the explosion."
]

@PointClass base(Targetname, Parentname, Angles) = env_muzzleflash : "Muzzle Flash" 
[
	parentattachment(string) : "Parent Attachment" : "" : "The name of an attachment on the parent to hierarchically attach to."
	scale(float) : "Scale" : "1" : "Size of the muzzle flash."
	
	input Fire(void) : "Fires the effect once."
]

@PointClass base(Targetname, EnableDisable) = logic_achievement :
	"Sends an achievement system related event from the map to the achievement system."
[
	//keyvalues
	
	AchievementEvent(choices) : "Achievement Event" : 0 : "Named event is sent to the achievement system when this entity receives a 'FireEvent' input." =
	[
		"ACHIEVEMENT_EVENT_HL2_HIT_CANCOP_WITHCAN"				: "[HL2] Hit the trashcan cop with the can."
		"ACHIEVEMENT_EVENT_HL2_PUT_CANINTRASH"					: "[HL2] Put the can in the trash."
		"ACHIEVEMENT_EVENT_HL2_ESCAPE_APARTMENTRAID"			: "[HL2] Escape the apartment block raid."
		"ACHIEVEMENT_EVENT_HL2_BREAK_MINITELEPORTER"			: "[HL2] Break the mini-teleporter in Kleiner's lab."
		"ACHIEVEMENT_EVENT_HL2_GET_CROWBAR"						: "[HL2] Get the crowbar."
		"ACHIEVEMENT_EVENT_HL2_GET_AIRBOAT"						: "[HL2] Get the Airboat"
		"ACHIEVEMENT_EVENT_HL2_GET_AIRBOATGUN"					: "[HL2] Get the airboat's mounted gun."
		"ACHIEVEMENT_EVENT_HL2_FIND_VORTIGAUNTCAVE"				: "[HL2] Discover the hidden singing vortigaunt cave in chapter Water Hazard."
		"ACHIEVEMENT_EVENT_HL2_KILL_CHOPPER"					: "[HL2] Destroy the hunter-chopper in Half-Life 2."
		"ACHIEVEMENT_EVENT_HL2_FIND_HEVFACEPLATE"				: "[HL2] Find the HEV Suit Charger faceplate in Eli's scrapyard."
		"ACHIEVEMENT_EVENT_HL2_GET_GRAVITYGUN"					: "[HL2] Get the Gravity Gun in Black Mesa East"
		"ACHIEVEMENT_EVENT_HL2_MAKEABASKET"						: "[HL2] Make a basket in Eli's scrapyard."
		"ACHIEVEMENT_EVENT_HL2_BEAT_RAVENHOLM_NOWEAPONS_START"	: "[HL2] Beat Ravenholm Gravgun only. (Start)."
		"ACHIEVEMENT_EVENT_HL2_BEAT_RAVENHOLM_NOWEAPONS_END"	: "[HL2] Beat Ravenholm Gravgun only. (End)."
		"ACHIEVEMENT_EVENT_HL2_BEAT_CEMETERY"					: "[HL2] Escort Gregori safely through the church cemetery."
		"ACHIEVEMENT_EVENT_HL2_KILL_ENEMIES_WITHCRANE"			: "[HL2] Kill 3 enemies using the crane."
		"ACHIEVEMENT_EVENT_HL2_PIN_SOLDIER_TOBILLBOARD"			: "[HL2] Pin the soldier to the billboard with the crossbow in chapter Highway 17."
		"ACHIEVEMENT_EVENT_HL2_KILL_ODESSAGUNSHIP"				: "[HL2] Defend Little Odessa from the gunship attack."
		"ACHIEVEMENT_EVENT_HL2_BEAT_DONTTOUCHSAND"				: "[HL2] Cross the antlion beach in chapter Sandtraps without touching the sand."
		"ACHIEVEMENT_EVENT_HL2_ENTER_NOVAPROSPEKT"				: "[HL2] Get inside Nova Prospekt"
		"ACHIEVEMENT_EVENT_HL2_BEAT_TURRETSTANDOFF2"			: "[HL2] Survive the second turret standoff in the prison."
		"ACHIEVEMENT_EVENT_HL2_FOLLOWFREEMAN"					: "[HL2] Gain command of a squad of rebels in the uprising"
		"ACHIEVEMENT_EVENT_HL2_BEAT_TOXICTUNNEL"				: "[HL2] Get through the toxic tunnel under City 17 in Half-Life 2."
		"ACHIEVEMENT_EVENT_HL2_BEAT_PLAZASTANDOFF"				: "[HL2] Survive the Generator Plaza standoff in chapter Anticitizen One."
		"ACHIEVEMENT_EVENT_HL2_KILL_ALLC1709SNIPERS"				: "[HL2] Kill all of the snipers in City 17."
		"ACHIEVEMENT_EVENT_HL2_BEAT_SUPRESSIONDEVICE"			: "[HL2] Shut down the supression device by disabling its generators."
		"ACHIEVEMENT_EVENT_HL2_BEAT_C1713STRIDERSTANDOFF"			: "[HL2] Survive the rooftop strider battle in the ruins of City 17."
		"ACHIEVEMENT_EVENT_HL2_BEAT_GAME"						: "[HL2] Destroy the Citadel's reactor core (Beat Game)."

		"ACHIEVEMENT_EVENT_HL2_GMAN_KLEINERSLAB"				: "[HL2] G-Man: trainstation_05 on Kleiner's Monitor"
		"ACHIEVEMENT_EVENT_HL2_GMAN_TRAINCAR"					: "[HL2] G-Man: canals_01 on TV in vort train car"
		"ACHIEVEMENT_EVENT_HL2_GMAN_REDBARN"					: "[HL2] G-Man: canals_06 at the red barn"
		"ACHIEVEMENT_EVENT_HL2_GMAN_OUTDOORMONITOR"				: "[HL2] G-Man: canals_06 on giant outdoor monitor"
		"ACHIEVEMENT_EVENT_HL2_GMAN_CATWALK"					: "[HL2] G-Man: canals_12 on catwalk"
		"ACHIEVEMENT_EVENT_HL2_GMAN_DAM"					: "[HL2] G-Man: canals_13 to the left of the dam"
		"ACHIEVEMENT_EVENT_HL2_GMAN_TRAINTRACKS"				: "[HL2] G-Man: town_05 at the end of the tracks"
		"ACHIEVEMENT_EVENT_HL2_GMAN_ODESSA"					: "[HL2] G-Man: coast_03 odessa meeting"
		"ACHIEVEMENT_EVENT_HL2_GMAN_PRISONMONITOR"				: "[HL2] G-Man: prison_02 control room monitor"
		"ACHIEVEMENT_EVENT_HL2_GMAN_FOYERTV"					: "[HL2] G-Man: c17_02 on TV in the destroyed foyer"
		
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_KLEINERSLAB"			: "[HL2] Lamda: Secret entrance to Kleiner's lab in trainstation_05"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALSSTATION"		: "[HL2] Lamda: canals_01 building by tracks"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_VENTCRAWL"			: "[HL2] Lamda: canals_01 vent crawl"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALSTUNNEL"			: "[HL2] Lamda: canals_01a tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SEWERGRATE"			: "[HL2] Lamda: canals_02 below grate in sewer corridor"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STEAMPIPE"			: "[HL2] Lamda: canals_03 under steam pipe"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CURVEDROOM"			: "[HL2] Lamda: canals_05 on second level of curved room"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SHANTYTOWN"			: "[HL2] Lamda: canals_05 before shanty town"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_TUNNELLADDER"			: "[HL2] Lamda: canals_06 on overhead metal walkway in tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_REDBARN"			: "[HL2] Lamda: canals_06 at the red barn"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_FLOATINGRAMP"			: "DON'T USE ME [HL2] Lamda: canals_06 outside the pipe at floating ramp puzzle"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_ZOMBIEAMBUSH"			: "[HL2] Lamda: canals_06 outside exploded tanker (zombie ambush)"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BELOWAPCS"			: "[HL2] Lamda: canals_07 in the wall below apcs"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COUNTERWEIGHT"		: "[HL2] Lamda: canals_08 in counterweighted basket"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAILWAYBRIDGE"		: "[HL2] Lamda: canals_08 behind railway bridge piling"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_TUNNELPLATFORMS"		: "[HL2] Lamda: canals_09 on wooden platforms in tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BANKEDCANAL"			: "[HL2] Lamda: canals_10 up banked side of canals passage"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALWALL"			: "[HL2] Lamda: canals_10 in wall opening after canals passage"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CHANNELSPLIT"			: "[HL2] Lamda: canals_12 right side of split channel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BMEDOCK"				: "[HL2] Lamda: eli_01 Black Mesa East dock"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GENERATORS"			: "[HL2] Lamda: town_01 through ductwork behind generators"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CARCRUSHERARENA"		: "[HL2] Lamda: town_01 behind fence in car-crusher arena"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAVENHOLMATTIC"		: "[HL2] Lamda: town_01a in attic opposite map exit"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_MINETUNNELEXIT"		: "[HL2] Lamda: town_05 tunnel exit from ravenholm mine"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COASTSHACK"			: "[HL2] Lamda: coast_01 shack after the buggy jump"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONSHACK"			: "[HL2] Lamda: coast_03 poison headcrab shack"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GUNSHIPVAN"			: "[HL2] Lamda: coast_04 broken down van after the gunship"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SUICIDECITIZEN"		: "[HL2] Lamda: coast_05 suicide citizen's gas tank cache"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAILROADSHACK"		: "[HL2] Lamda: coast_07 fenced off area outside of town"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COASTABOVEBATTERY"		: "[HL2] Lamda: coast_09 above the bathroom in the battery puzzle building"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SANDSHACK"			: "[HL2] Lamda: coast_11 elevated shack after the board bridge"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GMANCACHE"			: "[HL2] Lamda: prison_02 in the boarded up area of the gman sighting"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CELLCACHE"			: "[HL2] Lamda: prison_03 in the prison cell"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONLAUNDRY"		: "[HL2] Lamda: prison_05 in the laundry utility room"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SODAMACHINE"			: "[HL2] Lamda: prison_06 on top of the soda machine"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARDOGWALL"		: "[HL2] Lamda: c17_02 next to first Combine wall"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARSHACK"		: "[HL2] Lambda: c17_04 inside shack before metrocop holdout"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARFENCE"		: "[HL2] Lamda: c17_05 behind fence before end of map"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_FREEWAYTUNNEL"		: "[HL2] Lamda: c17_06a at start of freeway tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_DRAWBRIDGE"			: "[HL2] Lamda: c17_06b before second drawbridge"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_PLAZAFENCE"			: "[HL2] Lamda: c17_06b behind fence before end of map"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SEWERSCATWALKS"		: "[HL2] Lamda: c17_08 lowest catwalk at sewer entrance"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONZOMBIEALCOVE"	: "[HL2] Lamda: c17_08 wall cubby next to poison zombie"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_PIPEHOPTUNNEL"		: "[HL2] Lamda: c17_08 end of pipe hop tunnel by poison zombie"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_EXITCATWALK"		: "[HL2] Lamda: c17_08 side of building next to hallway leading to level exit"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_ENDOFC1712B"			: "[HL2] Lamda: c17_12b at map exit"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_WHITEVAN"				: "[HL2] Lamda: c17_13 white van in underground garage"
		


		"ACHIEVEMENT_EVENT_EP1_BEAT_MAINELEVATOR"						: "[EP1] Reach the bottom of the main elevator shaft."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_START"						: "[EP1] Contain the citadel core. (start)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_END"						: "[EP1] Contain the citadel core. (end)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE"						: "[EP1] Contain the citadel core."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_NOSTALKERKILLS"					: "[EP1] Contain the citadel core with no stalker kills"
		"ACHIEVEMENT_EVENT_EP1_BEAT_GARAGEELEVATORSTANDOFF"					: "[EP1] Survive long enough to get on the elevator in the parking garage."
		"ACHIEVEMENT_EVENT_EP1_BEAT_HOSPITALATTICGUNSHIP"					: "[EP1] Destroy the gunship in the hospital attic."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITIZENESCORT_NOCITIZENDEATHS_START"	: "[EP1] Don't let any citizens die when escorting them to the escape train (start)."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITIZENESCORT_NOCITIZENDEATHS_END"		: "[EP1] Don't let any citizens die when escorting them to the escape train (end)."
		"ACHIEVEMENT_EVENT_EP1_BEAT_GAME_NOHEALTHPICKUPS_START"				: "[EP1] Beat EP1 without picking up any health. (start)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_GAME_NOHEALTHPICKUPS_END"				: "[EP1] Beat EP1 without picking up any health. (end)"

		"ACHIEVEMENT_EVENT_EP1_START_GAME"						: "[EP1] Began EP1 (for tracking One Free Bullet)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_GAME"						: "[EP1] Beat EP1 (for tracking One Free Bullet)"



		"ACHIEVEMENT_EVENT_EP2_BEAT_ANTLIONINVASION"				: "[EP2] Hold off the antlion invasion inside the mine shaft"
		"ACHIEVEMENT_EVENT_EP2_BEAT_ANTLIONGUARDS"					: "[EP2] Defeat both antlion guards outside the White Forest"
		"ACHIEVEMENT_EVENT_EP2_BEAT_HUNTERAMBUSH"					: "[EP2] Survive the Hunter ambush at the radio tower."

		"ACHIEVEMENT_EVENT_EP2_KILL_CHOPPER_NOMISSES_START"					: "[EP2] Start of the chopper arena battle."
		"ACHIEVEMENT_EVENT_EP2_KILL_CHOPPER_NOMISSES_END"					: "[EP2] End of the chopper arena battle."

		"ACHIEVEMENT_EVENT_EP2_KILL_COMBINECANNON"					: "[EP2] Destroy the Combine Cannon in the junkyard."
		"ACHIEVEMENT_EVENT_EP2_BEAT_RACEWITHDOG"					: "[EP2] Beat DOG in the race to the White Forest."
		"ACHIEVEMENT_EVENT_EP2_BEAT_ROCKETCACHEPUZZLE"				: "[EP2] Unlock the Rocket Launcher lambda cache in chapter Under The Radar."
		"ACHIEVEMENT_EVENT_EP2_BEAT_WHITEFORESTINN"					: "[EP2] Survive the invasion at White Forest Inn"
		"ACHIEVEMENT_EVENT_EP2_PUT_ITEMINROCKET"					: "[EP2] Send <some object from chapter 1> into space."
		"ACHIEVEMENT_EVENT_EP2_BEAT_MISSILESILO2"					: "[EP2] Secure the launch doors on missile silo 2."
		"ACHIEVEMENT_EVENT_EP2_BEAT_GAME" 						: "[EP2] Save the missile silo from the Combine offensive."
		"ACHIEVEMENT_EVENT_EP2_BEAT_OUTLAND12_NOBUILDINGSDESTROYED" : "[EP2] Save the missile silo without losing any buildings."

		"ACHIEVEMENT_EVENT_EP2_FIND_RADAR_CACHE"					: "[EP2] Found a radar cache in chapter Under The Radar."

		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_VAN"		: "[EP2] Radar Cache: 09 first van cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_RPG"		: "[EP2] Radar Cache: 09 rpg cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_SHACK"			: "[EP2] Radar Cache: 09 shack floor board cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_CAVE"			: "[EP2] Radar Cache: 10 cave cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_HANGING"		: "[EP2] Radar Cache: 10 hanging crate cache"
		
				
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_01"		: "[EP2] Web Cache: ep2_outland_01a underwater cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_02"		: "[EP2] Web Cache: ep2_outland_03 grim pinata cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_03"		: "[EP2] Web Cache: ep2_outland_03 first arena exit tunnel wall cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_04"		: "[EP2] Web Cache: ep2_outland_03 second arena exit tunnel ceiling cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_05"		: "[EP2] Web Cache: ep2_outland_03 zombine grenade trap cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_06"		: "[EP2] Web Cache: ep2_outland_04 gear cave entry wall cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_07"		: "[EP2] Web Cache: ep2_outland_04 gear cave rockfall ceiling cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_08"		: "[EP2] Web Cache: ep2_outland_04 gear cave barnacle ceiling cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_09"		: "[EP2] Web Cache: ep2_outland_04 gear cave poison crab wall cache"

		"ACHIEVEMENT_EVENT_PORTAL_GET_PORTALGUNS"					: "[PORTAL] Acquire the fully powered Aperture Science Handheld Portal Device."
		"ACHIEVEMENT_EVENT_PORTAL_KILL_COMPANIONCUBE"					: "[PORTAL] Do whatever it takes to survive."
		"ACHIEVEMENT_EVENT_PORTAL_ESCAPE_TESTCHAMBERS"					: "[PORTAL] Make the correct party escort submission position decision."
		"ACHIEVEMENT_EVENT_PORTAL_BEAT_GAME"					: "[PORTAL] Complete Portal."
	]

	// Inputs
	input Toggle(void) : "Toggle the relay between enabled and disabled."
	input FireEvent(void) : "Tells the achievement system the specifed event has occured."
	
	// Outputs
	output OnFired(void) : "When the event fires, this fires."
]


//-------------------------------------------------------------------------
//
// Camera/monitor entities
//
//-------------------------------------------------------------------------
@PointClass base(Parentname, Angles) studioprop("models/editor/camera.mdl") = point_camera : "Camera"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0 
	]

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	FOV(float) : "FOV" : 90 : "Field of view in degrees"
//	resolution(float) : "resolution" : 256 : "width/height of the render target for the camera"
	UseScreenAspectRatio(choices) : "Screen Aspect Ratio" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogEnable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogColor(color255) : "Fog Color" : "0 0 0"
	fogStart(float) : "Fog Start" : 2048 : "The near fog plane."
	fogEnd(float) : "Fog End" : 4096 : "The far fog/clipping plane."
	fogMaxDensity(float) : "Fog Max Density [0..1]" : 1 : "The maximum fog density. 0=no fog, 1=full fog."

	// Inputs
	input ChangeFOV(string) : "Changes camera's FOV over time"
	input SetOnAndTurnOthersOff(void) : "Turn the camera on, and turn all other cameras off."
	input SetOn(void) : "Turn the camera on."
	input SetOff(void) : "Turn the camera off."
	
	// asw infested
	input Activate(void) : "Turn the camera on, activate it and deactivate all other cameras."
	input Deactivate(void) : "Turn the camera off, deactivate it."
]

@SolidClass base(func_brush) = func_monitor :
	"A monitor that renders the view from a given point_camera entity."
[
	target(target_destination) : "Camera name"
	
	// Inputs
	input Toggle(void) : "Toggle - If on, turn off, if off, turn on."
	input Enable(void) : "Enable."
	input Disable(void) : "Disable."
	input SetCamera(string) : "Sets the camera to use for this monitor. Takes the name of a point_camera entity in the map."
]
//-------------------------------------------------------------------------
//
// Vehicles.
//
//-------------------------------------------------------------------------
@BaseClass base(Targetname, Origin, Global, prop_static_base) = BaseVehicle
[
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/jeep_test.txt"
	actionScale(float) : "Scale of action input / framerate" : "1"

	// Inputs
	input Action(float) : "Set the speed of the action animation"

	input TurnOn(void) : "Turn on: Start engine & enable throttle"
	input TurnOff(void) : "Turn off: Stop engine, disable throttle, engage brakes."

	input Lock(void) : "Prevent the player from entering or exiting the vehicle."
	input Unlock(void) : "Re-allow the player to enter or exit the vehicle."
]


@BaseClass base(BaseVehicle) = BaseDriveableVehicle
[
	VehicleLocked(choices) : "Start locked" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	

	// Outputs
	output PlayerOn(void) : "Player entered the vehicle"
	output PlayerOff(void) : "Player exited the vehicle"
	
	output PressedAttack(void) : "Player Pressed attack key"
	output PressedAttack2(void) : "Player Pressed attack2 key"

	output AttackAxis(string) : "State of attack button [0,1]"
	output Attack2Axis(string) : "State of attack2 button [0,1]"
	
	// Inputs
	input HandBrakeOn(void) : "Turns the handbrake on"
	input HandBrakeOff(void): "Releases the handbrake"
]

@PointClass base(BaseVehicle) studioprop() = prop_vehicle :
	"Studiomodel vehicle that can be driven via inputs."
[
	// Inputs
	input Steer(float) : "Steer the vehicle +/-1"
	input Throttle(float) : "Throttle +/-1"

	spawnflags(flags) =
	[
		1 : "Always Think (Run physics every frame)" : 0
	]
]


@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_driveable :
	"Generic driveable studiomodel vehicle."
[
]

@PointClass base(BaseSpeaker) iconsprite("editor/ambient_generic.vmt") = env_speaker : "Announcement Speaker"
[
]

//-------------------------------------------------------------------------
// Script entities
//-------------------------------------------------------------------------
@PointClass base(Targetname) = script_intro : "Script: Custom entity used to handle the intro sequence."
[
	// Inputs
	input Activate(void) : "Take control of the player's view and start blending the two scenes."
	input Deactivate(void) : "Stop controlling the view."
	input SetCameraViewEntity(string) : "Set the viewpoint to blend with the player's viewpoint."
	input SetBlendMode(integer) : "Set the blending mode to use."
	input SetFOV(integer) : "Set the fov for the second camera."
	input SetNextFOV(integer) : "Set the FOV to blend to over time. Follow this with a SetFOVBlendTime input to start the fov blend."
	input SetFOVBlendTime(float) : "Set the amount of time it should take to blend to the next fov target, and start blending."
	input SetNextBlendMode(integer) : "Set the blending mode to blend to over time. Follow this with a SetNextBlendTime input to start the mode blend."
	input SetNextBlendTime(float) : "Set the amount of time it should take to blend to the next mode, and start blending."
	input FadeTo(string) : "Fade to a specific alpha amount of an amount of time. Parameters: <alpha> <duration>"
	input SetFadeColor(string) : "Set the fade color. Parameters: <Red> <Green> <Blue>"

	alternatefovchange(choices) : "Match env_zoom's FOV transition" : 0 : "Whether the script should match env_zoom's FOV transition." =
	[
		0 : "No"
		1 : "Yes"
	]
]

//-------------------------------------------------------------------------
//
// Special effects
//
//-------------------------------------------------------------------------
@PointClass base(Targetname) = env_entity_dissolver: "Entity Dissolver"
[
	input Dissolve(string) : "Dissolve target, if no target is passed it'll use the target specified in the target field."
	target(target_destination) : "Target to Dissolve" : "" : "Targetname of the entity you want to dissolve."

	magnitude(integer) : "Magnitude" : 250 : "How strongly to push away from the center."


	dissolvetype(choices) : "Dissolve Type" : "Energy" =
	[
		0 : "Energy"
		1 : "Heavy electrical"
		2 : "Light electrical"
		3 : "Core Effect"
	]
]

@PointClass base(Targetname, Angles) sphere(radius) sphere(inner_radius) = point_push: "Point Push"
[
	spawnflags(Flags) = 
	[
		1 : "Test LOS before pushing" : 0
		2 : "Use angles for push direction" : 0
		4 : "No falloff (constant push at any distance)" : 0
		8 : "Push players" : 1
		16 : "Push physics" : 1
	]
	
	enabled(choices) : "Start Enabled"	: 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	magnitude(float) : "Magnitude" : 100 : "How strongly to push away from the center."
	radius(float) : "Radius" : 128 : "Radius to affect items in."
	inner_radius(float) : "Inner radius" : "0" : "If not zero, the LOS is calculated from a point intersecting this sphere."
	
	input Enable(void) : "Enable the push."
	input Disable(void): "Disable the push."
]

// asw Infested classes

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_gamerules : "Alien Swarm: Infested game rules"
[
	// asw
	speedruntime(integer) : "Speedrun time" : 180 : "Speed run time in seconds.  Players must complete the mission within this time to unlock Uber mode."
	speedruntimesp(integer) : "Speedrun time singleplayer" : 0 : "Speed run time in seconds specifically for singleplayer.  If this is set to 0, then the normal Speedrun Time setting is used."
	jumpjettype(choices) : "Jump Jet and Blink path finding" : 0 : "This setting controls which nodes marine can do jump jet to. Before jumping server builds a route to destination node. If route exists and is valid then jump is performed. Use ai_show_connect to see ground links, ai_show_connect_jump to see ground and jump links. asw_debug_blink. Ground routes only(0) player can only jump on the node which is nearest to mouse position and there is a ground route to this node not blocked by closed doors or brushes. Ground and jump routes(1) same as (0) but 'jump links' between nodes are considered valid for building routes, so players can jump over a hole or steep. Allow jump everywhere(2) just allows to jump on any surface or prop, but not on a surface which is inside a playerclip or clip brush. Make sure you cover non jumpable areas with playerclip brushes. Jump no matter what(3) finds the nearest node to mouse position and jumps to it. The jump will always be performed no matter what. Used for survival maps where jumping saves lives. " =
	[
		0 : "Ground routes only"
		1 : "Ground and jump routes"
		2 : "Allow jump everywhere"
		3 : "Jump no matter what" 
	]
	disallowcamerarotation(choices) : "Camera Rotation" : 0 : "Allow players to rotate the camera using rotatecameraleft and rotatecameraright." =
	[
		0 : "Allow rotation"
		1 : "Deny rotation"
	]
	briefingmovie(string) : "Briefing Background Movie" : "" : "The name of the BIK file in the media folder to play behind the briefing for this mission. The movie is hidden if an rd_briefing_camera entity exists, and paused if rd_reduce_motion is enabled. If empty, the game will randomly pick between BGFX_01, BGFX_02, BGFX_03, and BG_04_FX."
	
	input SetTutorialStage(integer) : "reset the tutorial to a different spawn; only works on the tutorial level"
	input AddPoints(integer) : "Award points to the players. Only works if the mission is in progress and the mission overview is tagged with 'points'."
	input ModifyDifficulty(integer) : "Modify the mission difficulty level during gameplay. This does NOT affect health for already-spawned aliens. Normal difficulty is 5, brutal is 13. Only works if the mission is in progress. Difficulty level cannot go below 2 or above 10 million."
	input MarineFinishedMission(target_destination) : "Mark a marine as having finished the mission independely of their team, for speedrun leaderboards."
	output OnDifficulty(integer) : "On mission start, 1=Easy, 2=Normal, 3=Hard, 4=Insane, 5=Brutal"
	output OnOnslaught(integer) : "On mission start, 0=Normal, 1=Onslaught"
	output OnFriendlyFire(integer) : "On mission start, 0=Normal, 1=Hardcore"
	output OnChallenge(string) : "On mission start, the challenge filename or 0 for no challenge."
	output TotalPoints(integer) : "Called when score changes"
	output MissionDifficulty(integer) : "Called when computed mission difficulty changes. Not to be confused with OnDifficulty."
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_stylincam : "Inputs for stylin cam."
[
	CommanderFace(string) : "Commander Face Texture" : "briefing/face_pilot" : "The texture for the commander's face when activated via this entity. Should be a vmt file inside materials/vgui/"

	input ShowStylinCam(void) : "Turns on the Stylin Cam."
	input HideStylinCam(void) : "Turns off the Stylin Cam."
	input ShowCommanderFace(void) : "Turns on the Commander face."
	input HideCommanderFace(void) : "Turns off the Commander face."
]

@PointClass base(Targetname) iconsprite("editor/ambient_generic.vmt") sphere() = asw_ambient_generic : "Universal ambient sound. Use it to play and control a single sound."
[
	message(sound) : "Sound Name" : "" : "Name of the GameSound entry for the sound to play. Also supports direct .wav filenames."
	health(integer) : "Volume" : 10 : "Sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	preset(choices) :"Dynamic Presets" : 0 =						// NEEDHELP
	[
		0: "None"
		1: "Huge Machine"
		2: "Big Machine"
		3: "Machine"
		4: "Slow Fade in"  
		5: "Fade in"
		6: "Quick Fade in"
		7: "Slow Pulse"
		8: "Pulse"
		9: "Quick pulse"
		10: "Slow Oscillator"
		11: "Oscillator"
		12: "Quick Oscillator"
		13: "Grunge pitch"
		14: "Very low pitch"
		15: "Low pitch"
		16: "High pitch"
		17: "Very high pitch"
		18: "Screaming pitch"
		19: "Oscillate spinup/down"
		20: "Pulse spinup/down"
		21: "Random pitch"
		22: "Random pitch fast"
		23: "Incremental Spinup"
		24: "Alien"
		25: "Bizzare"
		26: "Planet X"
		27: "Haunted"
	]
	volstart(integer) : "Start Volume" : 0							// NEEDHELP
	fadeinsecs(integer) : "Fade in time in seconds (0-100)" : 0		// NEEDHELP
	fadeoutsecs(integer) : "Fade out time in seconds (0-100)" : 0	// NEEDHELP
	pitch(integer) : "Pitch" : 100 : "Sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch."
	pitchstart(integer) : "Start Pitch" : 100						// NEEDHELP
	spinup(integer) : "Spin up time (0-100)" : 0					// NEEDHELP
	spindown(integer) : "Spin down time (0-100)" : 0				// NEEDHELP
	lfotype(integer) : "LFO type 0)off 1)sqr 2)tri 3)rnd" : 0		// NEEDHELP
	lforate(integer) : "LFO rate (0-1000)" : 0						// NEEDHELP
	lfomodpitch(integer) : "LFO mod pitch (0-100)" : 0				// NEEDHELP
	lfomodvol(integer) : "LFO mod vol (0-100)" : 0					// NEEDHELP
	cspinup(integer) : "Incremental Spinup Count" : 0				// NEEDHELP
	radius(string) : "Max Audible Distance" : "1250" : "Maximum distance at which this sound is audible."
	spawnflags(flags) =
	[
		1: "Play everywhere" : 0
		16:"Start Silent": 1
		32:"Is NOT Looped": 1
	]
	SourceEntityName(target_destination) : "SourceEntityName" : : "If an entity is specified, sound will come from this named entity instead of the location of ambient_generic."
	// asw - so music can stop stim music playing during it
	PreventStimMusicDuration(float) : "Prevent Stim Music Duration" : 0 : "If set, stim music will not play when the player uses stims for the next x seconds"

	// Inputs
	input Pitch(integer) : "Sets the sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch."
	input PlaySound(void) : "Starts the sound."
	input StopSound(void) : "Stops the sound if it is playing."
	input ToggleSound(void) : "Toggles the sound between playing and stopping."
	input Volume(integer) : "Sets the sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	input FadeIn(integer) : "Fades the sound up to full volume over a specified number of seconds, with a range from 0 to 100 seconds."
	input FadeOut(integer) : "Fades the sound to silence over a specified number of seconds, with a range from 0 to 100 seconds."
]

@PointClass base(Targetname, Parentname, Angles, Global, Studiomodel, Origin) studioprop() = asw_polytest
[
	sequence(integer) : "Sequence" : 0
	cycle(float) : "Cycle" : 0
	playbackrate(float) : "Playback rate" : 0
]

@BaseClass wirebox(minoffset, maxoffset) = BaseASWSpawner
[
	SpawnIfMarinesAreNear(choices) : "Allow spawn if marines are near" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	StartBurrowed(choices) : "Start Burrowed" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	UnburrowIdleActivity(string) : "Unburrow Idle Activity": : "If alien starts burrowed, he'll play this activity while waiting for the burrow point to be clear."
	UnburrowActivity(string) : "Unburrow Activity": : "If alien starts burrowed, he'll play this activity while unburrowing."
	NearDistance(float) : "Prevent spawn if marines are this close" : 740 : "If 'Allow spawn if marines are near' option is set to 'No' this distance is used for the nearby marine check."
	
	LongRange(choices) : "Long sight range" : 0 : "If set to 'yes', aliens from this spawner will be able to see and sense enemies twice as far away as normal." =
	[
		0 : "No"
		1 : "Yes"
	]
	AlienOrders(choices) : "Alien Orders" : 0 : "Orders given to each alien spawned." =
	[
		0 : "Spread Then Hibernate"
		1 : "Move To"
		2 : "Move To Ignoring Marines"
		3 : "Move To Nearest Marine"
	]
	AlienOrderTargetName(target_destination) : "Alien Orders Target Name": : "Name of the target object for our orders (used by move to and move to ignoring marines orders)."
	AlienNameTag(string) : "Name to give spawned aliens": : "All aliens spawned by this spawner will be given this Name."
	ClearCheck(choices) : "Check Spawn Point Is Clear" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	MinSkillLevel(choices) : "Min Skill Level" : 0 : "The minimum skill level for this spawner to function." =
	[
		0 : "N/A"
		1 : "Easy"
		2 : "Normal"
		3 : "Hard"
		4 : "Insane"
		5 : "Brutal"
	]
	MaxSkillLevel(choices) : "Max Skill Level" : 0 : "The maximum skill level for this spawner to function." =
	[
		0 : "N/A"
		1 : "Easy"
		2 : "Normal"
		3 : "Hard"
		4 : "Insane"
		5 : "Brutal"
	]

	flammablesp(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]

	teslablesp(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]

	freezablesp(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]

	flinchablesp(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]

	reflectorsp(choices) : "Alien reflects grenades" : 0 : "If false, this alien works as usual. If true, grenades that hit the alien bounce off. " =
	[
		0 : "No"
		1 : "Yes"
	]

	healthbonussp(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"

	sizescalesp(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"

	speedscalesp(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"

	minoffset(vector) : "Minimum offset" : "0 0 0" : "X, Y, and Z offset from the spawner. Usually negative or 0."
	maxoffset(vector) : "Maximum offset" : "0 0 0" : "X, Y, and Z offset from the spawner. Usually positive or 0."
	yawoffset(float) : "Random yaw offset" : "0" : "The number of degrees to offset the spawned alien's direction by. A value of 180 can result in a yaw offset of -180 to 180, or a full circle. A value of 30 gives an arc from -30 to 30, or 60 degrees."

	alien_vscripts(scriptlist) : "Alien Entity Scripts" : "" : "Name(s) of script files that are executed when an alien is spawned."
	alien_thinkfunction(string) : "Alien script think function" : "" : "Name of a function in the spawned alien's script scope which will be called automatically."

	output OnSpawned(string) : "Fires when an alien is spawned. The activator is the alien, and the string is the name of the alien." 

	input ToggleEnabled(void) : "Toggles the spawner between enabled and disabled."
	input Enable(void) : "Allows aliens to spawn from this spawner."
	input Disable(void) : "Stops aliens spawning from this spawner."	
]

@PointClass base(Targetname, Angles, BaseASWSpawner) studioprop("models/editor/asw_spawner/asw_spawner.mdl") color(0 0 255) = asw_holdout_spawner
[
]

// iconsprite("editor/asw_spawner.vmt")
@PointClass base(Targetname, Angles, BaseASWSpawner) studioprop("models/editor/asw_spawner/asw_spawner.mdl") color(0 0 255) = asw_spawner
[
	MaxLiveAliens(integer) : "Max Num. of live aliens" : 1 : "Maximum number of live aliens that can be present in the level from this spawner at any given time."
	NumAliens(integer) : "Num. aliens we can create" : 1 : "The number of aliens that can spawn before the spawner is exhausted."	
	InfiniteAliens(choices) : "Infinitely spawn aliens" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	SpawnInterval(float) : "Spawn interval" : 4 : "Time in seconds between each alien spawning."
	SpawnIntervalJitter(float) : "Spawn interval variation" : 25 : "Percentage variation applied randomly to the spawn interval each time an alien spawns.  Value must be between 0 and 100.  The default 25 will give a 25% variation to the spawn interval, so a 1 second spawn interval would actually be randomly between 0.75 seconds and 1.25 seconds."
	
	AlienClass(choices) : "Alien Class" : 0 : "Which type of alien to produce from this spawner." =
	[
		0 : "asw_drone"
		1 : "asw_buzzer"
		2 : "asw_parasite"
		3 : "asw_shieldbug"
		4 : "asw_grub"
		5 : "asw_drone_jumper"
		6 : "asw_harvester"
		7 : "asw_parasite_defanged"
		8 : "asw_queen"
		9 : "asw_boomer"
		10 : "asw_ranger"
		11 : "asw_mortarbug"
		12 : "asw_shaman"
		13 : "asw_drone_uber"
		14 : "npc_antlionguard_normal"
		15 : "npc_antlionguard_cavern"
		16 : "npc_antlion"
		17 : "npc_antlion_worker"
		18 : "npc_zombie"
		19 : "npc_zombie_torso"
		20 : "npc_poisonzombie"
		21 : "npc_fastzombie"
		22 : "npc_fastzombie_torso"
	]

	AllowDirectorSpawns(choices) : "Allow director spawns" : 0 : "Should the director be allowed to spawn aliens from this spawner? Director spawns do not count towards the limit of this spawner." =
	[
		0 : "No"
		1 : "Yes"
		2 : "After Spawning Once"
	]

	DirectorLockTime(float) : "Director lock time" : 4 : "How long after the director spawns an alien here before the director can spawn aliens from this spawner again."

	SpawnerState(choices) : "Spawner State" : 0 : "Spawner's initial state" =
	[
		0 : "Start spawning on mission start"
		1 : "Wait for inputs"
	]

	spawnflags(Flags) =
	[
		1 : "Infinite even on Easy mode" : 0
		2 : "Don't spawn Uber aliens here" : 0
		4 : "Spawned aliens never sleep" : 0
		8 : "Not affected by carnage scale" : 0
	]

	output OnDirectorSpawned(string) : "Fires when an alien is spawned by the director. The activator is the alien."
	output OnAllSpawned(void) : "Fires when all children have been spawned"
	output OnAllSpawnedDead(void) : "Fires when all the children have been spawned and have died."

	input SpawnOneAlien(void) : "Spawns an alien."
	input ToggleSpawning(void) : "Toggles the spawner between spawning and waiting for inputs state."
	input StartSpawning(void) : "Makes the spawner start creating aliens."
	input StopSpawning(void) : "Stops the spawner from spawning, putting it into the 'Wait for inputs' state."
	input AllowDirectorSpawns(bool) : "Enable or disable director spawns."
]

@PointClass base(Targetname) = asw_spawn_group :
	"The named spawners will belong to this spawn group.  In holdout mode, spawning is done via spawn groups rather than individual spawners."
[
	SpawnerName00(target_destination) : "Spawner 01" : : "The name of one or more spawners."
	SpawnerName01(target_destination) : "Spawner 02" : : "The name of one or more spawners."
	SpawnerName02(target_destination) : "Spawner 03" : : "The name of one or more spawners."
	SpawnerName03(target_destination) : "Spawner 04" : : "The name of one or more spawners."
	SpawnerName04(target_destination) : "Spawner 05" : : "The name of one or more spawners."
	SpawnerName05(target_destination) : "Spawner 06" : : "The name of one or more spawners."
	SpawnerName06(target_destination) : "Spawner 07" : : "The name of one or more spawners."
	SpawnerName07(target_destination) : "Spawner 08" : : "The name of one or more spawners."
]

@PointClass base(Targetname) = asw_holdout_mode :
	"If put into a map, this map will be played in holdout mode."
[
	filename(string)  : "Holdout Filename"			: ""	  : "This is the filename of the holdout script that defines the waves, etc.  (assumes a path of 'resource\Holdout\')"
	// TODO: Outputs for mode starting, waves starting, progressing, ending, etc.	
	
	// Outputs
	output OnAnnounceWave01(void) : "Fired when Wave01 is announced."
	output OnAnnounceWave02(void) : "Fired when Wave02 is announced."
	output OnAnnounceWave03(void) : "Fired when Wave03 is announced."
	output OnAnnounceWave04(void) : "Fired when Wave04 is announced."
	output OnAnnounceWave05(void) : "Fired when Wave05 is announced."
	output OnAnnounceWave06(void) : "Fired when Wave06 is announced."
	output OnAnnounceWave07(void) : "Fired when Wave07 is announced."
	output OnAnnounceWave08(void) : "Fired when Wave08 is announced."
	output OnAnnounceWave09(void) : "Fired when Wave09 is announced."
	output OnAnnounceWave10(void) : "Fired when Wave10 is announced."
	output OnAnnounceWaveDefault(void) : "Fired when any wave is announced."
	
	output OnWave01(void) : "Fired when Wave01 starts."
	output OnWave02(void) : "Fired when Wave02 starts."
	output OnWave03(void) : "Fired when Wave03 starts."
	output OnWave04(void) : "Fired when Wave04 starts."
	output OnWave05(void) : "Fired when Wave05 starts."
	output OnWave06(void) : "Fired when Wave06 starts."
	output OnWave07(void) : "Fired when Wave07 starts."
	output OnWave08(void) : "Fired when Wave08 starts."
	output OnWave09(void) : "Fired when Wave09 starts."
	output OnWave10(void) : "Fired when Wave10 starts."
	output OnWaveDefault(void) : "Fired at the start of all waves."
	
	// Inputs
	input UnlockResupply(void) : "Tells the holdout that you want to let the player resupply at the end of the round."
]

@PointClass base(Targetname) iconsprite("editor/asw_order_nearby_aliens.vmt") color(0 0 255) = asw_order_nearby_aliens
[
	Radius(float) : "Order Radius" : 400 : "All aliens within this radius of the specified class will receive orders."
	
	AlienClass(choices) : "Alien Class" : 0 : "Which type of alien to send orders to." =
	[
		0 : "asw_drone"
		1 : "asw_buzzer"
		2 : "asw_parasite"
		3 : "asw_shieldbug"
		4 : "asw_grub"
		5 : "asw_drone_jumper"
		6 : "asw_harvester"
		7 : "asw_parasite_defanged"
		8 : "asw_queen"
		9 : "asw_boomer"
		10 : "asw_ranger"
		11 : "asw_mortarbug"
		12 : "asw_shaman"
		13 : "asw_drone_uber"
		14 : "npc_antlionguard_normal"
		15 : "npc_antlionguard_cavern"
		16 : "npc_antlion"
		17 : "npc_antlion_worker"
		18 : "npc_zombie"
		19 : "npc_zombie_torso"
		20 : "npc_poisonzombie"
		21 : "npc_fastzombie"
		22 : "npc_fastzombie_torso"
	]
	AlienOrders(choices) : "Alien Orders" : 2 : "Orders given to nearby aliens." =
	[
		0 : "Spread Then Hibernate"
		1 : "Move To"
		2 : "Move To Ignoring Marines"
		3 : "Move To Nearest Marine"
	]
	AlienOrderTargetName(target_destination) : "Alien Orders Target Name": : "Name of the target object for our orders (used by move to and move to ignoring marines orders)."

	input SendOrders(void) : "Gives the orders."	
]

@PointClass base(Parentname, Targetname,Angles) iconsprite("editor/asw_emitter.vmt") color(0 180 0) = asw_emitter : 
	"Swarm Generic Emitter"
[
	starton(choices) : "Starts on" : 1 : "Whether the emitter is intially spawning particles or not" =
	[
		0 : "No"
		1 : "Yes"
	]	
	template(String) : "Template" : "Default" : "The template used by this emitter.  Templates control the appearance of the emitter.  Templates can be created and modified in game with console command ASW_EditEmitterFrame"
	
	
	// Inputs
	input Toggle(void) : "Toggles the emitter on and off"
	input TurnOn(void) : "Turns the emitter on"
	input TurnOff(void) : "Turns the emitter off"
]

@NPCClass base(BaseNPC) studio("models/swarm/drone/drone.mdl") sphere() = asw_simple_drone :
    "Simple version of alien drone"
[

]

@NPCClass base(BaseNPC) studio("models/aliens/drone/drone.mdl") sphere() = asw_drone :
	"A vicious killing machine with bladed limbs and sharp teeth, easily able to tear a man to pieces, even an armoured IAF marine."
[
	MoveClone(target_destination) : "Move Clone" : : "If set to an entity name, this alien will match movement with that entity."
	
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
  
  flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
  teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
  freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
  flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]

  reflector(choices) : "Alien reflects grenades" : 0 : "If false, this alien works as usual. If true, grenades that hit the alien bounce off. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
  healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
  sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
  speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
		
	//input FightToPosition(string) : "Fight to position"
	//input EnableJump(void) : "Allow non-navigational jumping"
	//input DisableJump(void) : "Disallow non-navigational jumping"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
	input SetMoveClone(string) : "Alien will match position/angle of the specified entity."
	
	output	OnReachedFightGoal(void) : "Fires when the drone reaches his specified fight-to location"
]

@NPCClass base(BaseNPC) studio("models/swarm/drone/uberdrone.mdl") sphere() = asw_drone_uber :
	"Larger, stronger version of the asw_drone"
[
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
		
	//input FightToPosition(string) : "Fight to position"
	//input EnableJump(void) : "Allow non-navigational jumping"
	//input DisableJump(void) : "Disallow non-navigational jumping"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
	
	output	OnReachedFightGoal(void) : "Fires when the drone reaches his specified fight-to location"
]

@NPCClass base(BaseNPC) studio("models/swarm/drone/drone.mdl") sphere() = asw_drone_jumper :
	"A vicious killing machine with bladed limbs and sharp teeth, easily able to tear a man to pieces, even an armoured IAF marine.  This jumping variation can leap over large distances."
[
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]

	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
	
	output	OnReachedFightGoal(void) : "Fires when the drone reaches his specified fight-to location"
]

@NPCClass base(BaseNPC) studio("models/aliens/parasite/parasite.mdl") sphere() = asw_parasite :
	"A lethal parasite Swarm alien, capable of burrowing through an IAF marine's armour and flesh.  Once safely inside the host's body, the parasite will quickly consume the internal organs and multiply at a fanstastic rate, with many more parasites bursting out of the victim shortly after."
[
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
		
	//input FightToPosition(string) : "Fight to position"
	//input EnableJump(void) : "Allow non-navigational jumping"
	//input DisableJump(void) : "Disallow non-navigational jumping"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
	
	output	OnReachedFightGoal(void) : "Fires when the parasite reaches his specified fight-to location"
]

@NPCClass base(BaseNPC) studio("models/aliens/parasite/parasite.mdl") sphere() = asw_parasite_defanged :
	"A small, red and white insectoid that attacks by leaping towards a marine and exploding to shower its target in a corrosive substance."
[
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
		
	//input FightToPosition(string) : "Fight to position"
	//input EnableJump(void) : "Allow non-navigational jumping"
	//input DisableJump(void) : "Disallow non-navigational jumping"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
	
	output	OnReachedFightGoal(void) : "Fires when the parasite reaches his specified fight-to location"
]

@NPCClass base(BaseNPC) studio("models/aliens/shaman/shaman.mdl") sphere() = asw_shaman :
	"The Shaman uses a healing beam, like a medic. It will follow other aliens around and switch targets based on whichever has taken the most damage."
[
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
]

@NPCClass base(BaseNPC) studio("models/aliens/shieldbug/shieldbug.mdl") sphere() = asw_shieldbug :
	"A large, heavily armoured Swarm alien."
[
	sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	//healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	extrahealth(integer) : "Extra Health" : 0 : "Additional health added to the normal starting amount."
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
		
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
	
	output	OnReachedFightGoal(void) : "Fires when the Shieldbug reaches his specified fight-to location"
]

@NPCClass base(BaseNPC) studio("models/aliens/harvester/harvester.mdl") sphere() = asw_harvester :
	"Swarm Harvester"
[
    sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
]

@NPCClass base(BaseNPC) studio("models/aliens/mortar/mortar.mdl") sphere() = asw_mortarbug :
	"Swarm Mortarbug"
[
    sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
]

@NPCClass base(BaseNPC, Studiomodel) studio("models/swarm/Queen/queen.mdl") sphere() = asw_queen :
	"Swarm Queen"
[
    sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	
	
	output	OnSummonWave1(void) : "Fired out when the queen is at 80% health, to call the first attack wave"
	output	OnSummonWave2(void) : "Fired out when the queen is at 60% health, to call the second attack wave"
	output	OnSummonWave3(void) : "Fired out when the queen is at 40% health, to call the third attack wave"
	output	OnSummonWave4(void) : "Fired out when the queen is at 20% health, to call the last attack wave"
	output	OnQueenKilled(void) : "Fired when the queen is killed."
]

@NPCClass base(BaseNPC) studio("models/aliens/mortar3/mortar3.mdl") sphere() = asw_ranger :
	"Swarm Ranger"
[
    sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
]

@NPCClass base(BaseNPC) studio("models/aliens/boomer/boomer.mdl") sphere() = asw_boomer :
	"Swarm Boomer"
[
    sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input"
	]
	visiblewhenasleep(choices) : "Visible when asleep" : 0 : "If true, this alien will still get drawn even when asleep (useful for aliens you see far below you)." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Run speed scale" : "1.0" : "The factor used to scale alien run speed. Don't use 0"
	
	spawnflags(Flags) =
	[
		131072 : "Use Ground Checks" : 0
	]
	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	input BreakWaitForScript(void) : "Wakes the alien up if his Wait For Script flag was set"
]

@BaseClass color(0 0 200) base(Item) = ASWPickup
[
	FreezePickup(choices) : "Stay in air on startup" : 0 : "If set, this pickup won't fall to the ground when the map starts." =
	[
		0 : "No"
		1 : "Yes"
	]
	IsTemporaryPickup(choices) : "Temporary Pickup" : 0 : "If set, this pickup will not force a weapon to be dropped if there is no available slot and will be dropped if switched away from." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname, Parentname, Angles) studio("models/items/Ammobag/AmmoBag.mdl") = asw_ammo_drop : "Generic ammo pile"
[
	percent_remaining(integer) : "Percent Remaining" : 100 : "Percent of ammo remaining in box"
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammoassaultrifle.mdl")= asw_ammo_rifle : "Box of Rifle ammo"
[
	AddSecondary(choices) : "Add secondary item" : 1 : "If set this pickup adds grenade or shotgun charge depends on a rifle type" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammoautogun.mdl")= asw_ammo_autogun : "Box of Autogun ammo" []

@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammoshotgun.mdl")= asw_ammo_shotgun : "Box of Shotgun ammo" []

@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammovindicator.mdl")= asw_ammo_vindicator : "Box of Vindicator ammo"
[
	AddSecondary(choices) : "Add secondary item" : 1 : "If set this pickup adds vindicator grenade" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammoflamer.mdl")= asw_ammo_flamer : "Box of Flamer ammo" []

@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammopistol.mdl")= asw_ammo_pistol : "Box of Pistol ammo" []

@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammobattery.mdl")= asw_ammo_mining_laser : "Box of Mining Laser ammo" []

//@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammorailgun.mdl")= asw_ammo_railgun : "Box of Railgun ammo" []

@PointClass base(ASWPickup) studio("models/swarm/Ammo/ammopdw.mdl")= asw_ammo_pdw : "PDW Clip" []

@PointClass base(ASWPickup) studio("models/weapons/assaultrifle/assaultrifle.mdl")= asw_pickup_rifle : "Rifle"
[
	BulletsInGun(integer) : "Bullets In Gun" : 98
	Clips(integer) : "Clips" : 5
	SecondaryBullets(integer) : "Secondary Bullets" : 4
]

@PointClass base(ASWPickup) studio("models/weapons/Prototype/prototyperifle.mdl")= asw_pickup_prifle : "Prototype Rifle"
[
	BulletsInGun(integer) : "Bullets In Gun" : 98
	Clips(integer) : "Clips" : 5
	SecondaryBullets(integer) : "Secondary Bullets" : 4
]

@PointClass base(ASWPickup) studio("models/weapons/pdw/pdw.mdl")= asw_pickup_pdw : "Personal Defense Weapon"
[
	BulletsInGun(integer) : "Bullets In Gun" : 80
	Clips(integer) : "Clips" : 5
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/weapons/autogun/autogun.mdl")= asw_pickup_autogun : "Autogun"
[
	BulletsInGun(integer) : "Bullets In Gun" : 250
	Clips(integer) : "Clips" : 1
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/weapons/Shotgun/Shotgun.mdl")= asw_pickup_shotgun : "Shotgun"
[
	BulletsInGun(integer) : "Bullets In Gun" : 3
	Clips(integer) : "Clips" : 8
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/weapons/vindicator/vindicator.mdl")= asw_pickup_vindicator : "Vindicator"
[
	BulletsInGun(integer) : "Bullets In Gun" : 14
	Clips(integer) : "Clips" : 5
	SecondaryBullets(integer) : "Secondary Bullets" : 4
]

@PointClass base(ASWPickup) studio("models/weapons/flamethrower/flamethrower.mdl")= asw_pickup_flamer : "Flamer"
[
	BulletsInGun(integer) : "Bullets In Gun" : 80
	Clips(integer) : "Clips" : 5
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

//@PointClass base(ASWPickup) studio("models/swarm/Railgun/Railgun.mdl")= asw_pickup_railgun : "Railgun"
//[
//	BulletsInGun(integer) : "Bullets In Gun" : 1
//	Clips(integer) : "Clips" : 36
//	SecondaryBullets(integer) : "Secondary Bullets" : 0
//]

@PointClass base(ASWPickup) studio("models/weapons/Chainsaw/Chainsaw.mdl")= asw_pickup_chainsaw : "Chainsaw"
[
	BulletsInGun(integer) : "Bullets In Gun" : 100	
]

@PointClass base(ASWPickup) studio("models/weapons/MiningLaser/MiningLaser.mdl")= asw_pickup_mining_laser : "Mining Laser"
[
	BulletsInGun(integer) : "Bullets In Gun" : 50
	Clips(integer) : "Clips" : 5
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/FireExt/fireextpickup.mdl")= asw_pickup_fire_extinguisher : "Fire Extinguisher"
[
	BulletsInGun(integer) : "Bullets In Gun" : 200
	Clips(integer) : "Clips" : 1
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/weapons/pistol/Pistol.mdl")= asw_pickup_pistol : "Pistol"
[
	BulletsInGun(integer) : "Bullets In Gun" : 16
	Clips(integer) : "Clips" : 10
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/items/personalMedkit/personalMedkit.mdl")= asw_pickup_medkit : "Medkit"
[
	BulletsInGun(integer) : "Bullets In Gun" : 1
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/Flare/flarebox.mdl")= asw_pickup_flares : "Flares"
[
	BulletsInGun(integer) : "Bullets In Gun" : 9
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/flashlight/flashlightpickup.mdl")= asw_pickup_flashlight : "Flashlight"
[
	BulletsInGun(integer) : "Bullets In Gun" : 0
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/SentryGun/sentryguncase.mdl")= asw_pickup_sentry : "Sentry Gun Case"
[
	BulletsInGun(integer) : "Bullets In Gun" : 1
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammobag.mdl")= asw_pickup_ammo_bag : "Ammo Bag"
[

]

@PointClass base(ASWPickup) studio("models/swarm/Mine/mine.mdl")= asw_pickup_mines : "Mines"
[
	BulletsInGun(integer) : "Bullets In Gun" : 5
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/Stim/stim.mdl")= asw_pickup_stim : "Stim Pack"
[
	BulletsInGun(integer) : "Bullets In Gun" : 3
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/Welder/Welder.mdl")= asw_pickup_welder : "Welding tool"
[
	BulletsInGun(integer) : "Bullets In Gun" : 1
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/swarm/grenades/grenadebox.mdl")= asw_pickup_grenades : "Cluster Grenades"
[
	BulletsInGun(integer) : "Bullets In Gun" : 5
	Clips(integer) : "Clips" : 0
	SecondaryBullets(integer) : "Secondary Bullets" : 0
]

@PointClass base(ASWPickup) studio("models/items/itembox/itemboxsmall.mdl")= asw_weapon_blink : "Blink Pack"
[
	
]

@PointClass base(ASWPickup) studio("models/items/itembox/itemboxsmall.mdl")= asw_weapon_jump_jet : "Jump Jets"
[
	
]

@PointClass base(Targetname, Parentname, Angles, Global, Studiomodel) studioprop() = asw_door : 
	"An entity used to place a Swarm sliding door in the world."
[
	slavename(target_destination) : "Linked Door Name" : "" : "If this is a double door, put the name of the second half of the door here.  They will become linked."
	model(studio) : "World Model" : "models/props/doors/heavy_doors/doorleft.mdl"
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	spawnpos(choices) : "Spawn Position" : 0 =
	[
		0 : "Closed"
		1 : "Open"		
	]
	
	//slideangle(angle) : "Slide angle (Pitch Yaw Roll)" : "0 90 0" : "The angle at which the door will slide open."	
	slideangle(choices) : "Slide Direction" : "0 90 0" : "The direction in which the door will slide open." =
	[
		"0 90 0" : "Left"
		"0 -90 0" : "Right"		
	] 
	distance(float) : "Slide Distance" : 124 : "The distance that the door should slide when opened."
	speed(integer) : "Speed" : 140 : "The speed at which the door moves."
	soundopenoverride(sound) : "Fully Open Sound" : : "Sound played when the door has finished opening."
	soundcloseoverride(sound) : "Fully Closed Sound" : "ASW_Door.Door2StopClose" : "Sound played when the door has finished closing."
	soundmoveoverride(sound) : "Moving Sound" : "ASW_Door.Door2Open" : "Sound played when the door starts to move."
	returndelay(integer) : "Delay Before close (-1 stay open)" : 5 : "Amount of time, in seconds, after the door has opened before it closes. If the value is set to -1, the door never closes itself."
	dmg(integer) : "Damage Inflicted When Blocked" : 0 : "Amount of damage done to entities that block the movement of this door, per frame."
	
	//soundlockedoverride(sound) : "Locked Sound" : : "Sound played when the player tries to open the door, and fails because it's locked."
	//soundunlockedoverride(sound) : "Unlocked Sound" : : "Sound played when the door is unlocked."

	forceclosed(choices) : "Force Closed" : 1 : "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects." =
	[
		0 : "No"
		1 : "Yes"
	]
	LightingOrigin(target_destination) : "Lighting origin" : : "Use the position of this entity as the origin for lighting."

	spawnflags(flags) =
	[
		1 : "Starts Open" : 0
		//512: "NPCs Can't" : 0
		//2048: "Starts locked" : 0
		4096: "Door silent (No sound, and does not alert NPCs)" : 0
		//8192: "Use closes" : 1
		16384 : "Door silent to NPCS (Does not alert NPCs)" : 0
		//32768 : "Ignore player +USE" : 0
	]
	
	totalsealtime(float) : "Total Seal Time" : 10 : "The number of seconds it takes to seal this door with the welder."
	currentsealtime(float) : "Current Seal Time" : 0 : "How sealed this door currently is.  Number should be from 0 to the Total Seal Time."
	//doorstrength(integer) : "Door Strength" : 100 : "How much damage this door can take before opening."
	showsonscanner(choices) : "Shows on Scanner" : 1 : "Whether this door will show a blip on the scanner." =
	[
		0 : "No"
		1 : "Yes"
	]
	autoopen(choices) : "Auto Open" : 1 : "Whether this door should automatically open when something enters the door area." =
	[
		0 : "No"
		1 : "Yes"
	]
	doortype(choices) : "Door Type" : 0 : "Reinforced doors have twice the strength of normal doors.  Indestructible doors cannot be shot or bashed down by aliens." =
	[
		0 : "Normal"
		1 : "Reinforced"
		2 : "Indestructible"
	]	
	dentamount(choices) : "Damaged" : 0 : "Whether the door is already damaged or not" =
	[
		0 : "Undamaged"
		1 : "Damaged"
		2 : "Very damaged"
		3 : "Damaged (Flipped)"
		4 : "Very damaged (Flipped)"
	]
	CanCloseToWeld(choices) : "Can Close To Weld" : 1 : "Whether the welding tool can make this door close to start welding when it's open." =
	[
		0 : "No"
		1 : "Yes"
	]
	CanPlayerWeld(choices) : "Can Player Weld" : 1 : "Whether the player can weld or cut this door using a welding tool." =
	[
		0 : "No"
		1 : "Yes"
	]
	DoCutShout(choices) : "Do Cut Shout" : "0" : "Should a marine shout out 'cut this door!' when he encounters this door sealed and another marine with a welder is nearby?" =
	[
		0 : "No"
		1 : "Yes"	
	] 
	DoBreachedShout(choices) : "Do Breached Shout" : "1" : "Should a nearby marine shout out 'they've breached the door!' when drones bash the door down?" =
	[
		0 : "No"
		1 : "Yes"	
	] 
	DoAutoShootChatter(choices) : "Do Auto Shoot Shout" : "0" : "If set, a marine will shout out 'shoot it down!' as soon as they enter the door area.  Use this for sealed doors that you expect the player to shoot his way through." =
	[
		0 : "No"
		1 : "Yes"	
	]

	// Outputs
	output OnClose(void) : "Fired when the door is told to close."
	output OnOpen(void) : "Fired when the door is told to open."
	output OnFullyOpen(void) : "Fired when the door reaches the fully open position."
	output OnFullyClosed(void) : "Fired when the door reaches the fully closed position."
	output OnBlockedClosing(void) : "Fired when the door is blocked while closing."
	output OnBlockedOpening(void) : "Fired when the door is blocked while opening."
	output OnUnblockedClosing(void) : "Fired when the door is unblocked while closing."
	output OnUnblockedOpening(void) : "Fired when the door is unblocked while opening."
	output OnFullySealed(void) : "Fired when a marine full seals a door."
	output OnFullyCut(void) : "Fired when a marine full cuts open the seal on the door."
	output OnDestroyed(void) : "Fired when the door is knocked down."

	// Inputs
	input Open(void) : "Open the door, if it is not fully open."
	input OpenAwayFrom(string) : "Open the door away from the specified entity."
	input Close(void) : "Close the door, if it is not fully closed."
	input Toggle(void) : "Toggle the door between open and closed."
	//input Lock(void) : "Lock the door."
	//input Unlock(void) : "Unlock the door."
	input NPCNear(void) : "Should be used when an NPC has entered the associated trigger_asw_door_area.  This is the area in which the marine can interact with the door."
	input EnableAutoOpen(void) : "Makes the door open when a marine is within its asw_door_area."
	input DisableAutoOpen(void) : "Stops the door from opening when a marine is within its asw_door_area."
	input RecommendWeld(void) : "Uses the instructor to tell the players to weld the door."
]

@SolidClass base(trigger_multiple) = trigger_asw_marine_position :
	"A trigger that fires when a marine is standing inside it, facing the desired direction."
[
    spawnflags(flags) = 
	[
		//1: "Clients" : 0
		2: "Marines and Aliens" : 0
		4: "Pushables": 0
		8: "Physics Objects" : 0
		16: "Only marines" : 1
		//32: "Only clients in vehicles" : 0
		64: "Everything" : 0
		//512: "Only clients *not* in vehicles" : 0
	]
	
	DesiredFacing(float) : "Desired facing" : "0" : "Yaw direction the marine must face in."
	Tolerance(float) : "Tolerance" : "45" : "Number of degrees tolerance either side of the desired yaw."
	
    output MarineInPosition(void) : "Fires when marine is inside the volume and facing the right way."
    output MarineOutOfPosition(void) : "Fires when marine is no longer inside the volume and facing the right way."
]

@SolidClass base(trigger_asw_use_area) = trigger_asw_door_area :
	"A trigger volume that should be linked with asw_doors."
[

]

@SolidClass base(trigger_asw_use_area) = trigger_asw_button_area :
	"A trigger volume in which marines can use a button.  Set the UseTarget to a door to make it a Door Button."
[
	panelpropname(target_destination) : "Panel Prop name" : "" : "Name of the prop_dynamic used for this button panel's representation in the world."
	changepanelskin(choices) : "Change Panel Skin" : 1 : "Skin # of this panel's prop_dynamic will be set to reflect the locked/unlocked/power status of this panel." =
	[
		0 : "No"
		1 : "Yes"
	]
	numwires(integer) : "Num Wires" : 2 : "How many wires this door panel has inside it (from 1 to 4).  Each wire unjumbled will speed up the charging of the actuators."
	wirecolumns(integer) : "Wire Columns" : 5 : "How many sections across the wire has (from 3 to 8).  Higher values should be used for more difficult panels."
	wirerows(integer) : "Wire Rows" : 2 : "How many rows each wire has (from 1 to 3)."
	locked(choices) : "Locked" : 0 : "Whether this panel is locked or not." =
	[
		0 : "No"
		1 : "Yes"
	]
	needstech(choices) : "Requires tech marine" : 1 : "If set only tech marines can hack this panel." =
	[
		0 : "No"
		1 : "Yes"
	]
	useafterhack(choices) : "Auto-use after hack" : 1 : "If set, when the marine finishes hacking this panel, he will perform a use action on it." =
	[
		0 : "No"
		1 : "Yes"
	]
	disableafteruse(choices) : "Disable After Use" : 0 : "If set, button panel will become non-interactive after use" =
	[
		0 : "No"
		1 : "Yes"
	]
	nopower(choices) : "Has Power" : 0 : "Button areas without power can't be used.  Button areas can be powered using input PowerOn." =
	[
		0 : "Powered"
		1 : "No Power"
	]
	nopowermessage(string) : "No Power Message" : "" : "Message to show on the use icon when this panel has no power."
	HoldTime(float) : "Button Hold Time" : "-1" : "Amount of time button must be held down to activate it. If this value is not positive, the button does not need to be held."

	HeldObjectName(target_destination) : "Required Held Object" : : "The targetname of the rd_weapon_generic_object a marine must be holding to push this button."
	DestroyHeldObject(choices) : "Destroy Held Item" : 0 : "Whether to destroy the required held item when the button is activated." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnFastHackFailed(void) : "Fired when the fast hack timer elapses during a hack."
	output OnButtonHackStarted(void) : "Fired whenever a marine starts hacking this panel."
	output OnButtonHackAt25Percent(void) : "Fired whenever the hack gets over halfway through"
	output OnButtonHackAt50Percent(void) : "Fired whenever the hack gets over halfway through"
	output OnButtonHackAt75Percent(void) : "Fired whenever the hack gets over halfway through"
	output OnButtonHackCompleted(void) : "Fired when a marine successfully finishes hacking this panel."
	output OnButtonActivated(void) : "Fired whenever a marine uses this button panel."
	
	input PowerOn(void) : "Enables power to this button area.  Button areas without power can't be used."
	input PowerOff(void) : "Disables power to this button area.  Button areas without power can't be used."
	input ResetHack(void) : "Relocks the panel, removes the hack and all hack progess.  Only works if the panel isn't in use."
	input Unlock(void) : "Unlocks a locked button panel"
]

@SolidClass base(trigger_asw_use_area) = trigger_asw_computer_area :
	"A trigger volume in which marines can use a computer."
[
	panelpropname(target_destination) : "Computer prop name" : "" : "Name of the prop_dynamic used for this computer panel's representation in the world.  Skin # of this prop_dynamic will be set to reflect the locked/unlocked status of this computer."
	Locked(choices) : "Locked" : "1" : "Locked computer terminals will require a Technical Engineer to pass the hacking minigame before allowing access to the main menu." =
	[
		0 : "Unlocked"
		1 : "Locked"		
	]
	HackDifficulty(integer) : "Num Tumblers" : 5 : "How many columns are in the hack puzzle for this computer (from 3 to 8)."	
	EntriesPerTumbler(integer) : "Entries per tumbler" : 5 : "How many numbers are in each column of the hack puzzle (from 5 to 9)."	
	TumblerMoveInterval(float) : "Move interval" : "0.5" : "How long each column pauses for before shifting to a new number (from 0.3 to 2.0 seconds)."
	SecurityCam1Name(target_destination) : "SecurityCam1 Name" : "" : "Name of the 1st security cam available from this computer."
	SecurityCam1Label(string) : "SecurityCam1 Label" : "" : "Text label shown over this camera view ingame."
	SecurityCam2Name(target_destination) : "SecurityCam2 Name" : "" : "Name of the 2nd security cam available from this computer."
	SecurityCam2Label(string) : "SecurityCam2 Label" : "" : "Text label shown over this camera view ingame."
	SecurityCam3Name(target_destination) : "SecurityCam3 Name" : "" : "Name of the 3rd security cam available from this computer."
	SecurityCam3Label(string) : "SecurityCam3 Label" : "" : "Text label shown over this camera view ingame."
	Turret1Name(target_destination) : "Turret1 Name" : "" : "Name of the 1st turret available from this computer."
	Turret2Name(target_destination) : "Turret2 Name" : "" : "Name of the 2nd turret available from this computer."
	Turret3Name(target_destination) : "Turret3 Name" : "" : "Name of the 3rd turret available from this computer."
	PDAName(string) : "PDA Name" : "" : "If this computer area represents a PDA, then put the name of the PDA owner here."
	MailFile(string) : "Mail File" : "" : "Name of the text resource file containing email to show at this computer."
	NewsFile(string) : "News File" : "" : "Name of the text resource file containing news to show at this computer."
	StocksSeed(string) : "Stocks Seed" : "" : "Number used to seed the stocks data shown at this computer.  Computers with the same Stock Seed will show the same stock values."
	WeatherSeed(string) : "Weather Seed" : "" : "Number used to seed the weather data shown at this computer.  Computers with the same Weather Seed will show the same weather values."
	PlantFile(string) : "Plant Status" : "" : "Put in any text here to make the computer show the reactor status (special option for use only in Rydberg).  Leave blank to not have this option in the computer."
	DownloadObjectiveName(target_destination) : "Download Objective Name" : "" : "Name of the objective to trigger as complete when a marine downloads the documents from this computer."
	DownloadTime(float) : "Download Time" : "10.0" : "How many seconds it takes to download the critical files from this computer.  NOTE: This number may be adjusted ingame by the marine's hack skill."

	output OnFastHackFailed(void) : "Fired when the fast hack timer elapses during a hack."
	output OnComputerHackStarted(void) : "Fired whenever a marine starts hacking this computer."
	output OnComputerHackHalfway(void) : "Fired when a marine successfully finishes hacking this pcomputer."
	output OnComputerHackCompleted(void) : "Fired when a marine successfully finishes hacking this pcomputer."
	output OnComputerActivated(void) : "Fired whenever a marine uses this computer."
	output OnComputerDataDownloaded(void) : "Fired when a marine downloads the critical data from this computer."
	output OnComputerViewMail1(void) : "Fired whenever a marine reads the 1st mail in this computer."
	output OnComputerViewMail2(void) : "Fired whenever a marine reads the 2nd mail in this computer."
	output OnComputerViewMail3(void) : "Fired whenever a marine reads the 3rd mail in this computer."
	output OnComputerViewMail4(void) : "Fired whenever a marine reads the 4th mail in this computer."
]

@PointClass base(Targetname, Angles) studio("models/aliens/egg/egg.mdl")= asw_egg : "Egg"
[
	ParasiteClass(string) : "Parasite Class" : "asw_parasite"
	FixedJumpDir(choices) : "Fixed Jump Direction" : 0 : "If set, our parasite will always jump out in the direction the egg is facing." =
	[
		0 : "No"
		1 : "Yes"
	]
	SkipEggChatter(choices) : "Avoid Egg Chatter" : 0 : "If set, marines won't shout out about this egg." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	output OnEggOpened(void) : "Fired when the egg starts to open."
	output OnEggHatched(void) : "Fired when the parasite hatches out of the egg."
	output OnEggDestroyed(void) : "Fired when the egg is destroyed."

	// Inputs
	input EggOpen(void) : "Makes the top of the egg open, the parasite will hatch shortly after."
	input EggHatch(string) : "Makes the egg open and the parasite hatch out immediately."
]

@PointClass base(Targetname, Parentname, EnableDisable) iconsprite("editor/asw_objective_dummy.vmt") = asw_marker : 
	"Alien Swarm Mission Marker"
[
	objectivename(target_destination) : "Objective Name" : "" : "Name of the target object this is associated with."
	mapwidth(integer) : "Map Width" : 256 : "Size of the map marker in world units."
	mapheight(integer) : "Map Height" : 256 : "Size of the map marker in world units."
	
	input SetComplete(void) : "Mark as complete."
	input SetIncomplete(void) : "Mark as incomplete."
]

@BaseClass = ASWObjective
[	
	objectivedescription1(string) : "Objective Description Line 1" : "" : "First 255 characters of the detail description for this objective"
	objectivedescription2(string) : "Objective Description Line 2" : "" : "Second 255 characters of the detail description for this objective"
	objectivedescription3(string) : "Objective Description Line 3" : "" : "Third 255 characters of the detail description for this objective"
	objectivedescription4(string) : "Objective Description Line 4" : "" : "Fourth 255 characters of the detail description for this objective"
	objectiveimage(string) : "Objective Image" : "" : "Name a VGUI texture to show as a screenshot for this objective."
	objectiveinfoicon1(string) : "Icon 1" : "" : "Icon displayed next to the map on the briefing."
	objectiveinfoicon2(string) : "Icon 2" : "" : "Icon displayed next to the map on the briefing."
	objectiveinfoicon3(string) : "Icon 3" : "" : "Icon displayed next to the map on the briefing."
	objectiveinfoicon4(string) : "Icon 4" : "" : "Icon displayed next to the map on the briefing."
	objectiveinfoicon5(string) : "Icon 5" : "" : "Icon displayed next to the map on the briefing."
	objectiveicon(string) : "HUD Icon" : "" : "Icon displayed next to the objective name on the HUD."
	Visible(choices) : "Visible" : 1 : "Whether this objective is visible or hidden" =
	[
		0 : "Hidden"
		1 : "Visible"
	]
	Optional(choices) : "Optional" : 0 : "Whether this objective is required or optional" =
	[
		0 : "Required"
		1 : "Optional"
	]

	output OnObjectiveComplete(void) : "Fired when the objective is completed."
	input SetVisible(bool) : "Hide or show the objective"
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_dummy.vmt") = asw_objective_dummy : 
	"Alien Swarm Mission Objective"
[
	objectivetitle(string) : "Objective Title" : "" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_kill_eggs.vmt") = asw_objective_kill_eggs : 
	"Alien Swarm Mission Objective"
[
	NumEggs(integer) : "Num Eggs" : 1 : "How many eggs have to be killed for this objective to be complete."
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_kill_aliens.vmt") = asw_objective_kill_aliens : 
	"Alien Swarm Mission Objective"
[
	NumKills(integer) : "Num Kills" : 1 : "How many aliens have to be killed for this objective to be complete."
	AlienClass(choices) : "Alien Class" : 0 : "Which type of alien must be killed" =
	[
		0 : "asw_drone"
		1 : "asw_buzzer"
		2 : "asw_parasite"
		3 : "asw_shieldbug"
		4 : "asw_grub"
		5 : "asw_drone_jumper"
		6 : "asw_harvester"
		7 : "asw_parasite_defanged"
		8 : "asw_queen"
		9 : "asw_boomer"
		10 : "asw_ranger"
		11 : "asw_mortarbug"
		12 : "asw_shaman"
		13 : "asw_drone_uber"
		14 : "npc_antlionguard_normal"
		15 : "npc_antlionguard_cavern"
		16 : "npc_antlion"
		17 : "npc_antlion_worker"
		18 : "npc_zombie"
		19 : "npc_zombie_torso"
		20 : "npc_poisonzombie"
		21 : "npc_fastzombie"
		22 : "npc_fastzombie_torso"
	]
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_destroy_goo.vmt") = asw_objective_destroy_goo :
	"Alien Swarm Mission Objective"
[
	NumGoo(integer) : "Num Goo" : 1 : "How many Alien Goo entities have to be destroyed for this objective to be complete."
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_triggered.vmt") = asw_objective_triggered : 
	"Alien Swarm Mission Objective"
[
	objectivetitle(string) : "Objective Title" : "" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."
	SetProgress(integer) : "Initial Progress" : 0 : "Numerator of progress fraction."
	SetMaxProgress(integer) : "Max Progress" : 0 : "Denominator of progress fraction (0 for no progress tracking)."
	input SetComplete(void) : "SetComplete"
	input SetIncomplete(void) : "SetIncomplete"
	input SetFailed(void) : "SetFailed"
	input SetProgress(integer) : "Set numerator of objective progress"
	input SetMaxProgress(integer) : "Set denominator of objective progress"
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_escape.vmt") = asw_objective_escape : 
	"Alien Swarm Escape Objective"
[
	objectivetitle(string) : "Objective Title" : "" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."
	input MarineInEscapeArea(void) : "MarineInEscapeArea"
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_survive.vmt") = asw_objective_survive : 
	"Alien Swarm all marines must survive objective"
[
	objectivetitle(string) : "Objective Title" : "#asw_all_survive" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."	
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_countdown.vmt") = asw_objective_countdown : 
	"Alien Swarm Countdown Objective - counts down to 0 then explodes the level"
[
	objectivetitle(string) : "Objective Title" : "" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."
	CountdownLength(float) : "Countdown Length" : 60 : "How many seconds before the level explodes."
	WarningText(string) : "Warning Text" : "" : "Text to show on the HUD when the countdown starts. Default is WARNING."
	CaptionText(string) : "Caption Text" : "" : "The caption for the countdown on the HUD. Default is NUCLEAR DETONATION IMMINENT."
	Sound60(sound) : "60 Second Warning" : "" : "Sound to play when 63 seconds remain."
	Sound30(sound) : "30 Second Warning" : "" : "Sound to play when 33 seconds remain."
	Sound10(sound) : "10 Second Warning" : "" : "Sound to play when 13 seconds remain."
	SoundFail(sound) : "Failure Sound 1" : "" : "First sound to play when objective fails."
	SoundFailLF(sound) : "Failure Sound 2" : "" : "Second sound to play when objective fails. Played simultaneously with first."
	FailColor(color255) : "Fade To Color" : "" : "Fade to this color when the objective fails."

	input StartCountdown(void) : "Start Countdown"
	input CancelCountdown(void) : "Cancel Countdown"

	output OnCountdownFailed(void) : "Fired when the countdown timer reaches 0."
]

@PointClass base(Targetname, ASWObjective) iconsprite("editor/asw_objective_kill_queen.vmt") = asw_objective_kill_queen : 
	"Alien Swarm Mission Objective"
[
	objectivetitle(string) : "Objective Title" : "" : "Title to use for this objective in the list on the briefing screen, or in-game for the current objective HUD display."
	queenname(target_destination) : "Queen name" : "" : "Targetname of asw_queen that has to be killed."
]

@PointClass base(Targetname) iconsprite("editor/asw_debrief_info.vmt") = asw_debrief_info : 
	"Mission debrief text"
[
	DebriefText1(string) : "Debrief Text 1" : "" : "First paragraph of mission debrief text."
	DebriefText2(string) : "Debrief Text 2" : "" : "Second paragraph of mission debrief text."
	DebriefText3(string) : "Debrief Text 3" : "" : "Third paragraph of mission debrief text."
]

@PointClass base(Targetname) iconsprite("editor/asw_tech_marine_req.vmt") = asw_tech_marine_req : 
	"Tech Marine Req."
[
	input DisableTechMarineReq(void) : "Disable tech marine req.  If a tech is required to hack a certain objective, then send this input after the hack is finished (as the tech marine is no longer needed to finish the mission)."
	input EnableTechMarineReq(void) : "Re-enable the tech marine req. after disabling it."
]

@PointClass base(Targetname) iconsprite("editor/asw_tech_marine_req.vmt") = asw_equip_req : 
	"Equipment Requirement - requires at least one of each class to be selected before mission can begin."
[
	equipclass1(string) : "Equipment class 1" : "" : "First equipment class that needs to be selected before mission can begin."
	equipclass2(string) : "Equipment class 2" : "" : "Second equipment class that needs to be selected before mission can begin."
	equipclass3(string) : "Equipment class 3" : "" : "Third equipment class that needs to be selected before mission can begin."
]

@NPCClass base(BaseNPC) studio("models/swarm/Buzzer/buzzer.mdl") = asw_buzzer : "Buzzer"
[
	spawnflags(Flags) = 
	[
		65536 : "Start packed up (folded and engine off)" : 0
		131072 : "Don't use any damage effects" : 0
		262144 : "Use Air Nodes" : 0
		1048576 : "No Danger Sounds" : 0
	]
	
	flammable(choices) : "Can be ignited by fire" : 1 : "If false, this alien will not be ignited by fire" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	teslable(choices) : "Can be electro stunned by tesla gun" : 1 : "If true, this alien can be electro stunned by tesla gun" =
	[
		0 : "No"
		1 : "Yes"
	]
  
	freezable(choices) : "Can be frozen" : 1 : "If true, this alien can be frozen by freeze grenade or turret" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	flinchable(choices) : "Can flinch" : 1 : "If true, this alien works as usual. If false, the alien doesn't flinch on taken damage. " =
	[
		0 : "No"
		1 : "Yes"
	]
  
	healthbonus(integer) : "Health bonus" : 0 : "The ammount of health to add to an alien"
  
	sizescale(float) : "Size scale" : "1.0" : "The factor used to scale alien size. Don't use 0"
  
	speedscale(float) : "Fly speed scale" : "1.0" : "The factor used to scale alien fly speed. Don't use 0"
	
	input DisableSwarm(void) : "Disable the buzzer swarm behavior."
	//input Unpack(void) : "Causes the buzzer to stop being packed up."
]

@PointClass base(Targetname, Angles, Studiomodel, Origin) studioprop() = asw_alien_goo
[
	model(studio) : "World model" : "models/swarm/AlienGoo/TendrilFat.mdl"
	PulseStrength(float) : "Pulse Strength" : "0.8" : "Controls the amplitude of the pulsating goo (ranges from 0 to 1.0)."
	PulseSpeed(float) : "Pulse Speed" : "1.0" : "Controls how quickly the goo pulsates (1.0 is normal, can be set higher or lower)."
	BurningLinkName(string) : "Burning Link Name" : "" : "Alien goo/Grub sacs that share the same Burning Link Name will all be set on fire when one of those alien goo's is set on fire."
	HasAmbientSound(choices) : "Has Ambient Sound" : 1 : "Whether the goo has a slimey ambient sound effect loop or not." =
	[
		0 : "No"
		1 : "Yes"
	]
	RequiredByObjective(choices) : "Required By Objective" : 1 : "Whether the goo must be destroyed for an objective. (supresses burn hint if no)" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	input Extinguish(void) : "Extinguish the biomass."
	
	output OnIgnite(void) : "Fired when the goo catches fire"
	output OnGooDestroyed(void) : "Fired when the goo is destroyed"
]

@PointClass base(Targetname, Angles, Studiomodel, Origin) studioprop() = asw_grub_sac
[
	model(studio) : "World model" : "models/swarm/GrubSac/grubsac.mdl"
	spawnflags(Flags) = 
	[
		1 : "Burst when touched" : 1
		2 : "Burst randomly when marine is near" : 1
		4 : "Burst when damaged" : 1
		8 : "Burst on input" : 1
	]
	input Burst(void) : "Burst and spawn grubs."
	//PulseStrength(float) : "Pulse Strength" : "0.8" : "Controls the amplitude of the pulsating goo (ranges from 0 to 1.0)."
	//PulseSpeed(float) : "Pulse Speed" : "1.0" : "Controls how quickly the goo pulsates (1.0 is normal, can be set higher or lower)."
	BurningLinkName(string) : "Burning Link Name" : "" : "Alien goo/Grub sacs that share the same Burning Link Name will all be set on fire when one of those alien goo's is set on fire."
]

@PointClass base(Targetname) iconsprite("editor/asw_info_message.vmt") = asw_info_message : 
	"An entity that pops up a message window on the player's HUD"
[
	WindowSize(integer) : "Window Size" : 5: "Size of the message window (from 4 to 6)"
	WindowTitle(string) : "Message Name" : "" : "Name of the message when shown in the message log (Up to 128 characters)."
	MessageLine1(string) : "Message Line 1" : "" : "First line of the message (Up to 255 characters)."
	MessageLine2(string) : "Message Line 2" : "" : "Second line of the message (Up to 255 characters)."
	MessageLine3(string) : "Message Line 3" : "" : "Third line of the message (Up to 255 characters)."
	MessageLine4(string) : "Message Line 4" : "" : "Fourth line of the message (Up to 255 characters)."		
	MessageSound(sound) : "Message Sound" : "" : "Sound played when the message is shown."
	MessageImage(string) : "Message Image" : "" : "This wide texture is drawn centered below the message text at 2:1 width to height ratio, taking up whatever space is left at the bottom of the message panel."
	
	// Inputs
	input ShowMessage(void) : "Shows the message and plays the sound."
	input StopSound(void) : "Stops the sound from the last asw_info_message that made a sound."
	
	// outputs
	output OnMessageRead(void) : "Fired when any player closes this message window"
]

@PointClass base(BaseDriveableVehicle) studioprop() = asw_vehicle_jeep :
	"Driveable studiomodel jeep."
[
	//input StartRemoveTauCannon(void) : "Start the tau removal sequence."
	//input FinishRemoveTauCannon(void) : "Finish the tau removal sequence."
]

//@PointClass base(Targetname, Parentname, Angles, Global, Studiomodel, Origin) studioprop("models/buggy.mdl") = asw_dummy_vehicle
//[
	//sequence(integer) : "Sequence" : 0
	//cycle(float) : "Cycle" : 0
	//playbackrate(float) : "Playback rate" : 0
//]

@SolidClass base(Trigger) = trigger_asw_chance :
	"A trigger volume that can be triggered multiple times and has a random chance of firing each time."
[
	wait(integer) : "Delay Before Reset" : -1 : "Amount of time, in seconds, after the trigger has triggered before it can be triggered again. If set to -1, it will never trigger again."
	TriggerChance(float) : "Trigger Chance" : "1.0" : "Chance of the trigger firing out (from 0 to 1)."
	 
	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is touched and the triger chance passes."
]

@SolidClass base(Trigger) = trigger_asw_random_target :
	"A trigger volume that can be triggered multiple times and will randomly fire one of its outputs."
[
	wait(integer) : "Delay Before Reset" : -1 : "Amount of time, in seconds, after the trigger has triggered before it can be triggered again. If set to -1, it will never trigger again."
	NumOutputs(integer) : "Num Outputs" : 2 : "How many outputs to randomly pick from (from 1 to 6)."
	 
	// Outputs
	output OnTrigger1(void) : "One of the OnTrigger outputs is randomly chosen and fired whenever the trigger is activated."
	output OnTrigger2(void) : "One of the OnTrigger outputs is randomly chosen and fired whenever the trigger is activated."
	output OnTrigger3(void) : "One of the OnTrigger outputs is randomly chosen and fired whenever the trigger is activated."
	output OnTrigger4(void) : "One of the OnTrigger outputs is randomly chosen and fired whenever the trigger is activated."
	output OnTrigger5(void) : "One of the OnTrigger outputs is randomly chosen and fired whenever the trigger is activated."
	output OnTrigger6(void) : "One of the OnTrigger outputs is randomly chosen and fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_asw_supplies_chatter :
	"A trigger volume that will occasionally make a marine comment about a supply stash."
[
	wait(integer) : "Delay Before Reset" : -1 : "Amount of time, in seconds, after the trigger has triggered before it can be triggered again. If set to -1, it will never trigger again."
	
	NoAmmo(choices) : "Supply Type" : 0 : "The type of objects in the nearby supply stash." =
	[
		0 : "Mixed"
		1 : "No ammo pickups"
	]
	 
	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_asw_synup_chatter :
	"A trigger volume that will make Crash or Vegas comment on SynUp cola."
[
	//wait(integer) : "Delay Before Reset" : -1 : "Amount of time, in seconds, after the trigger has triggered before it can be triggered again. If set to -1, it will never trigger again."
	
	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_asw_marine_knockback :
	"A trigger volume that will knock away any marines touching it."
[
	wait(integer) : "Delay Before Reset" : -1 : "Amount of time, in seconds, after the trigger has triggered before it can be triggered again. If set to -1, it will never trigger again."
	
	knockdir(vector) : "Knockback Velocity" : "0 0 100" : "Velocity given to the thrown back marine."
	 
	// Outputs
	output OnKnockedBack(void) : "Fired whenever the trigger is activated."
]

@PointClass base(Targetname, Parentname, Angles, Studiomodel) studioprop("models/swarm/SentryGun/remoteturret.mdl") = asw_remote_turret
[
	viewlimits(angle) : "Turn range (Pitch Yaw Roll)" : "20 40 0" : "How many degrees this turret can turn either side of its initial facing."
	UpsideDown(choices) : "Ceiling Turret" : 1 : "If set, this turret will be oriented upside down, as if attached to the ceiling." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnStartedUsing(void) : "Fired when a marine starts using the remote turret. activator=marine, caller=computer area"
	output OnStoppedUsing(void) : "Fired when a marine logs out of the remote turret. activator=marine, caller=computer area"
]

@PointClass base(Targetname, Parentname, Angles, Studiomodel) studioprop("models/sentry_gun/machinegun_top.mdl") = asw_sentry_top_machinegun
[
	TurretRange(float) : "Turret Range" : "525" : "Maximum distance that it will pick targets."
]

@PointClass sphere() iconsprite("editor/env_shake.vmt") base(Targetname, Parentname) = asw_env_shake : 
	"An entity to control screen shake on marines." 
[
	spawnflags(flags) =
	[
		1: "GlobalShake" : 0
		//2: "Disrupt player control" : 0 // doesn't work
		4: "In Air" : 0		// shakes objects even if they are not onground
		8: "Physics" : 0	// shakes physically as well as the camera
		16: "Ropes" : 0		// shakes ropes too.
	]

	amplitude(float) : "Amplitude (0-16)" : "4" : "The amount of noise in the screen shake. Should be a range between 0 and 16."
	radius(float) : "Effect Radius" : "500" : "The radius around this entity in which to affect players."
	duration(float) : "Duration (seconds)" : "1" : "The length of time in which to shake the player's screens."
	frequency(float) : "Frequency" : "2.5" : "The frequency used to apply the screen shake. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."

	// Inputs
	input Amplitude(string) : "Set the amplitude (0-16)"
	input Frequency(string) : "Set the frequence. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."
	input StartShake(void) : "Start the shake."
	input StartShakeForMarine(target_destination) : "Start the shake for a specific marine."
	input StopShake(void) : "Stop the shake."
]

@NPCClass base(BaseNPC) studio("models/swarm/Grubs/Grub.mdl") sphere() = asw_grub :
	"A harmless Swarm grub, that crawls about looking icky."
[
	//sleepstate(choices) : "Sleep State" : 1 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	//[
//		0 : "None"
		//1 : "Waiting for threat"
		//2 : "Waiting for PVS"
		//3 : "Waiting for input"
	//]
//	
//	spawnflags(Flags) =
//	[
		//131072 : "Use Ground Checks" : 0
	//]
]

@SolidClass base(Trigger) = trigger_asw_jump :
	"A trigger volume that causes Swarm Drones to jump when they come into contact with it"
[
	//wait(integer) : "Delay Before Reset" : 1 : "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once)."
	
	JumpDestName(target_destination) : "Jump Destination Name" : : "The name of the item Drones should jump to (use an info_target)."
	MinMarineDist(float)	: "Min. Marine Distance" : 400 : "If a marine is within this distance from the Drone, the Drone will not jump."
	ClearOrders(choices) : "Clear Orders" : 1 : "Clear the jumpers orders when he jumps." =
	[
		0 : "No"
		1 : "Yes"
	]
	CheckEnemyDirection(choices) : "Check enemy direction" : 1 : "If the alien has an enemy, check it's in the direction of the jump, else don't jump." =
	[
		0 : "No"
		1 : "Yes"
	]
	CheckTriggerJumped(choices) : "Check Trigger Jumped Already" : 1 : "Don't jump if the alien has trigger jumped already." =
	[
		0 : "No"
		1 : "Yes"
	]
	RetryFailedJumps(choices) : "Retry Failed Jumps" : 0 : "If set and the alien can't make the jump, the alien will stand and wait until he can make the jump." =
	[
		0 : "No"
		1 : "Yes"
	]
	ForceJump(choices) : "Force Jump" : 0 : "Forces alien to jump with the Force Angle and Speed, without using the jump target and without checking for a valid jump or enemy." =
	[
		0 : "No"
		1 : "Yes"
	]
	ForceAngle(angle) : "Force Jump Pitch Yaw Roll (Y Z X)" : "90 0 0" : "Direction the alien should do a forced jump."
	ForceSpeed(float) : "Force Jump Speed" : 400 : "Speed of forced jump."
	 
	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]



@PointClass base(Targetname,Angles) size(-8 -8 -8, 8 8 8) = asw_menu_flashlight : 
	"A flashlight for the main menu that will aim in the direction of the mouse cursor.  Not to be used for normal levels!" 
[
	
]

@SolidClass base(Targetname, Origin) = asw_camera_control :
	"The camera will change when marines are inside this volume."
[
	angtype(choices) : "Angle Type" : 0 : "Camera angle to use when marines are in this volume." =
	[
		0 : "Top-down"
		1 : "40 degree"
	]
]

@SolidClass base(Targetname) = asw_snow_volume :
	"Causes snow when the marine is inside this volume."
[
    snowtype(choices) : "Snow Type" : 1 : "Type of snow that falls.  NOTE: This setting must be the same on all asw_snow_volumes in your map.  Heavier snow should be used in outdoor maps, where snow clouds/particles cover the level (snow particles WILL flow outside the volume bounds some)." =
	[
		0 : "Light, accurate bounds"
		1 : "Heavy, inaccurate bounds"
	]
]

@PointClass base(Origin) sphere(core) sphere(maxdistance) = asw_scanner_noise :
	"Adds noise and distortion over the marine's scanner when he gets near."
[
    maxdistance(float) : "Distortion radius" : "200" : "Radius of the scanner distortion effect.  Falloff is linear from the core edge to this distance.  Must be greater than the core radius."
    core(float) : "Core distortion radius" : "100" : "Radius of the core scanner distortion effect.  Within this core, distortion will be at full."
]

@PointClass base(RenderFields, DXLevelChoice) size(-2 -2 -2, 2 2 2) sprite() color(20 140 20) = env_sprite_clientside : 
	"An entity that controls the drawing of a sprite in the world, created clientside so cannot be parented to moving things and will use up no network bandwidth or CPU." 
[
	framerate(string) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/glow01.spr" : "Material of the sprite to be drawn."
	scale(string) : "Scale" : "" : "Scale multiplier of the sprite."
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
	]

	GlowProxySize(float) : "Size of Glow Proxy Geometry." : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."		
]

@PointClass base(BasePropPhysics) studioprop("models/swarm/Barrel/barrel.mdl") = asw_barrel_radioactive :
	"A Barrel that gives off radioactive gas when shot." 
[
	BulletForceImmune(boolean) : "Immune to bullet forces" : 0 : "Used to determine whether or not bullet damage should cause the prop to move."
	
	// Inputs
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	input SetMass(float) : "Set mass of this object."

	// Outputs	
	output OnBreak(void) : "Fired when this breakable breaks."
	output OnTakeDamage(void) : "Fired each time this breakable takes any damage."
	output OnHealthChanged(float) : "Fired when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."
]

@PointClass base(BasePropPhysics) studioprop("models/swarm/Barrel/barrel.mdl") = asw_barrel_explosive :
	"A Barrel that explodes when shot." 
[
	BulletForceImmune(boolean) : "Immune to bullet forces" : 0 : "Used to determine whether or not bullet damage should cause the prop to move."
	
	// Inputs
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	input SetMass(float) : "Set mass of this object."

	// Outputs	
	output OnBreak(void) : "Fired when this breakable breaks."
	output OnTakeDamage(void) : "Fired each time this breakable takes any damage."
	output OnHealthChanged(float) : "Fired when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."
]

//@PointClass base(Angles, Studiomodel) studioprop() = asw_prop_clientside : 
	//"Detail Prop"
//[
//	model(studio) : "World model"
//	DefaultAnim(string) : "Default Animation" : "" : "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation."
//]

@NPCClass base(BaseNPC, Parentname, TalkNPC, PlayerCompanion ) studio("models/swarm/Colonist/Male/MaleColonist.mdl") = asw_colonist : "Colonist"
[	
	notifynavfailblocked(choices) : "Fire output when Nav is blocked?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	gender(choices) : "Gender of Colonist" : 0 =
	[
		0 : "Random"
		1 : "Male"
		2 : "Female"
	]
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_intro_control : 
	"Alien Swarm Intro Control"
[
	input LaunchCampaignMap(void) : "Shows the campaign map so the player can choose a mission to play."
	input ShowCredits(void) : "Fades in ASI logo and credits"
	input ShowCainMail(void) : "Shows the Lt. Cain mail for the outro"
	output IntroStarted(void) : "Fired when the intro/outro map begins."
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_info_heal : 
	"Fires output when a marine is healed"
[	
	output MarineHealed(void) : "Fired when a marine is healed with the med satchel or medkit"
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_hurt_nearest_marine : 
	"Hurts the nearest marine by a significant amount of damage, but doesn't kill him"
[	
	input HurtMarine(void) : "Hurts the nearest marine by a significant amount of damage, but doesn't kill him"
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_marines_past_area : 
	"Entity that can be told when marines go past a certain point and will fire an output when the specified number of marines are past.  Can be told when a marine has backtracked to account for that also."
[	
    NumMarines(integer) : "Num Marines" : 3 : "How many marines must pass this area for the 'MarinesPast' output to fire."

	input MarineInFront(void) : "A trigger should send this input when a marine is past this point."	
	input MarineBehind(void) : "A trigger should send this input when a marine is behind this point (to detect marines that walk past here but then backtrack)."
	
	output MarinesPast(void): "Fired when the desired number of marines are past here"
]

@PointClass base(Angles, Studiomodel, RenderFields) studioprop() = asw_client_corpse :
	"A clientside only prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics model."
[
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "90 0 0" : "This entity's orientation in the world. Pitch is rotation around the Y axis, " +
		"yaw is the rotation around the Z axis, roll is the rotation around the X axis."
	fademindist(float) : "Start Fade Dist" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist)"
	fademaxdist(float) : "End Fade Dist" : 0 : "Max fade distance at which the prop is visible (0 = don't fade out)"
	fadescale(float) : "fade scale" : 1 :	"If you specify a fade in the worldspawn, or if the engine is running under dx7, or the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified." +
						" This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades." +
						" Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances."
	model(studio) : "World Model" : "models/swarm/colonist/male/malecolonist.mdl"
	skin(integer) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
	SetBodyGroup(integer) : "Body Group" : 0

	disableshadows(boolean) : "Disable Shadows" : 0 : "Used to disable dynamic shadows on this entity."
	ragdollsequence(string) : "Ragdoll Sequence" : "" : "Ragdoll's pose will come from the first frame of this sequence.  Note: NOT WORKING CURRENTLY"

]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/asw_queen_retreat_spot.vmt")  = asw_queen_retreat_spot :
	"Queen retreats to this spot, facing in this direction, at certain injury levels, before summoning the next attack wave."
[
	
]

@PointClass base(PlayerClass, Angles) studio("models/editor/playerstart.mdl") = info_tutorial_start :
	"Indicates the starting point of the marines for the tutorial for each marine.  Multiple start points can be placed for each marine and the one matching the save stage the player has reached will be used." +
	"Mapper should set the asw_tutorial_save_stage ConVar with triggers as the player progresses through the tutorial."
[	
	MarineSlot(choices) : "Marine Slot" : 0 : "Sets which marine this start point is intended for." =
	[
		0 : "Crash"
		1 : "Sarge"
		2 : "Bastille"
	]
	SaveStage(integer) : "Save stage" : 0 : "Sets which stage save this start point is intended for."
]

@PointClass base(Targetname, Parentname, Angles, EnableDisable) iconsprite("editor/asw_holoscan.vmt") = asw_holoscan : 
	"Shows a red aiming scan arc, designed for use with the red hologram marines in the tutorial."
[
]

@PointClass base(Targetname, Parentname, Angles, EnableDisable) iconsprite("editor/asw_holoscan.vmt") = asw_holo_sentry : 
	"Shows a red aiming scan arc, designed for use with the red hologram marines in the tutorial."
[
	// Outputs
	output OnSentryPlaced(void) : "When a sentry gun is placed and this entity is enabled this fires."
]

// asw
@PointClass sphere() iconsprite("editor/env_slomo.vmt") base(Targetname, Parentname) = env_slomo : 
	"Causes slow motion for a while" 
[
	duration(float) : "Duration (seconds)" : "6" : "How long the slow motion lasts."
	
	// Inputs
	input StartSlomo(void) : "Start the slomo."
	input StopSlomo(void) : "Stop the slomo."
]

@PointClass base(Angles) studio("models/swarmprops/Vehicles/BloodhoundMesh.mdl") sphere() = asw_bloodhound :
	"Dropship used to deploy marines in Landing Bay mission."
[
	
]

@PointClass base(Targetname,Angles,Parentname) studioprop("models/editor/camera.mdl") = asw_broadcast_camera : 
	"A camera entity that controls all players views. While it's active, all players will see out of the camera." 
[
	target(target_destination) : "Entity to Look At" : : "Name of the entity that the camera should point at and track while active."
	targetattachment(string) : "Target Attachment Name" : : "If set, the camera will focus on the specified attachment on the 'Entity to Look At'."
	wait(integer) : "Hold Time" : 10 : "The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay active until told to deactive, set the 'Infinite Hold Time' spawnflag."
	moveto(target_destination) : "Path Corner" : : "The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move."
	spawnflags(flags) =
	[
		//1: "Start At Player" : 1
		//2: "Follow Player" : 1
		4: "Freeze Players" : 0
		8: "Infinite Hold Time" : 0
		16:"Snap to goal angles" : 0
		//32:"Make Player non-solid" : 0
		//64:"Interruptable by Player" : 0
		128: "Disable HUD" : 0
	]
	speed(string) : "Initial Speed" : "0" : "The starting speed that the camera moves at, if it's on a path track."
	acceleration(string) : "Acceleration units/sec^2" : "500" : "The speed at which the camera accelerates to path corner's desired speeds."
	deceleration(string) : "Stop Deceleration units/sec^2" : "500" : "The speed at which the camera decelerates to path corner's desired speeds."

	// Inputs
	input Enable(void) : "Enable the point_viewcontrol, and start controlling the player's view."
	input EnableForPlayerIndex(integer) : "Enable the asw_broadcast_camera for specified player index. Note: does not change the view to first person."
	input Disable(void) : "Disable the point_viewcontrol, and stop controlling the player's view."

	// Outputs
	output OnEndFollow(void) : "Fired when the point_viewcontrol deactivates, due to the Disable input being received, the Entity to Look At being destroyed, or the Hold Time expiring."
]

@SolidClass base(Trigger, Targetname) = asw_trigger_fall :
	"A trigger volume that kills any NPCs that touch it."
[		
	output OnFallingObject(void) : "Fired whenever something falls into this trigger."
]

@PointClass base(BasePropPhysics, RenderFields) studioprop() sphere(fademindist) sphere(fademaxdist) = asw_prop_laserable :
	"This is a prop_physics that can only be damaged effectively by DMG_ENERGBEAM (i.e. the mining laser)"
[
	BreakParticleEffect(particlesystem) : "Break Effect" : "" : "Choose what effect to spawn when the prop breaks."
	BreakSound(sound) : "Break Sound" : "ASWBarrel.Explode" : "Choose what sound to play when the prop breaks."

	// Inputs
	input Ignite(void) : "Ignite, burst into flames."
]

@SolidClass base(DXLevelChoice) color(0 180 0) = func_subtract : 
	"Subtracts geometry from other brushes (use vmf_subtract.exe)"
[

]

@SolidClass base(Targetname, Parentname) = func_precipitation : 
	"A brush entity that creates rain and snow inside its volume."
[
	renderamt(integer) : "Density (0-100%)" : 100	
	rendercolor(color255) : "Color (R G B)" : "100 100 100"
	preciptype(choices) : "Precipitation Type" : 0 =	
	[
		0 : "Rain"
		1 : "Snow"
		2 : "Ash"
		3 : "Snowfall"
		4 : "Particle Rain"
		5 : "Particle Ash"
		6 : "Particle Rainstorm"
		7 : "Particle Snow"
	]
	snowDustAmt(float) : "Amount of snow dusting (1-100)" : 50
]

@PointClass base(Angles) studio("models/editor/marine_hint.mdl") color(8 64 232) = info_marine_hint :
	"Follow hint node for marines"
[
]

@PointClass base(Node, Angles) studio("models/editor/node_marine_hint.mdl") color(8 64 232) = info_node_marine_hint :
	"Follow hint node for marines.  It is also a navigation node for ground moving NPCs. Navigation nodes are baked into the nodegraph so that NPCs can move " +
	"to them. Ground nodes fall to the ground when they spawn."
[
	spawnflags(Flags) = 
	[
		1 : "Force human permission" : 0
		2 : "Force small_centered permission" : 0
		4 : "Force wide_human permission" : 0
		8 : "Force tiny permissiont" : 0
		16 : "Force wide_short permission" : 0
		32 : "Force medium permission" : 0
		64 : "Force tiny_centered permission" : 0
		128 : "Force large permission" : 0
		256 : "Force large_centered permission" : 0		
		512 : "Keep editor position" : 0
		1024 : "Force medium tall permission" : 0
		2048 : "Force tiny fluid permission" : 0
		4096 : "Force medium big (Swarm Drone) permission" : 0
	]
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/env_spark.vmt") = asw_env_spark : 
	"An entity used to create particle sparks at its origin." 
[
	rendercolor(color255) : "Color (R G B)" : "231 194 149"
	MinDelay(string) : "Min Delay" : "0.15" : "The shortest delay between sparks (in seconds)."
	MaxDelay(string) : "Max Delay" : "1" : "The longest delay between sparks (in seconds).  If the max delay is shorter than the min delay, the delay will equal the max."
	Magnitude(choices) : "Magnitude" : 50 : "The size of the sparks." =
	[
		25		: "Tiny"
		50		: "Small"
		100		: "Medium"
		200		: "Large"
		400		: "Huge"
	]
	PercentCollide(float) : "Percent Collide" : "10" : "What percentage of the sparks will collide with the world (0-100)"

	spawnflags(flags) =
	[
		64: "Start ON" : 0
		128: "Silent" : 0
		256: "Electrical" : 1
	]
	
	// Inputs
	input StartSpark(void) : "Start the spark effect."
	input StopSpark(void) : "Stop the spark effect."
	input ToggleSpark(void) : "Toggle the on/off state of the spark effect."
	input SparkOnce(void) : "Spark once."
	input SetMinDelay(float) : "Set the min delay that a spark will shoot."
	input SetMaxDelay(float) : "Set the max delay that a spark will shoot."
]

@PointClass base(Targetname, Parentname) iconsprite("editor/env_explosion.vmt") = asw_env_explosion : 
	"An entity that creates an explosion at its origin." 
[
	iDamage(Integer) : "Damage" : 100 : "The amount of damage done by the explosion."
	// If no radius override, magnitude will determine radius.
	iRadiusOverride(Integer) : "Radius Override" : 0 : "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude.  (doesn't affect the fireball effect, yet)"
	ExplosionSound(sound) : "Explosion Sound" : "ASW_Explosion.Explosion_Default" : "Choose what sound to play when the explosion happens.  If you don't want a sound to play, click the No Sound flag."
	
	spawnflags(flags) =
	[
		1: "No Damage" : 0
		2: "Repeatable" : 0
		4: "No Fireball" : 0
		8: "No Decal" : 0
		16: "No Sound" : 0
		32: "Damage above surface only" : 0
		64: "Generic damage" : 0
	]

	ignoredEntity(target_destination) : "Ignored Entity" : : "Do not harm or affect the named entity."

	// Inputs
	input Explode(void) : "Triggers the explosion."
]


@PointClass base(Targetname) iconsprite("editor/env_soundscape.vmt") = asw_jukebox: 
	"An entity used to control music events." 
[
	FadeInTime(float): "Fade In Time": "1.0" : "The amount of time it takes for the music to fade in to 100% volume (in seconds.)"
	FadeOutTime(float): "Fade Out Time": "1.0" : "The amount of time it takes for the music to fade out to 0 volume (in seconds.)"
	DefaultMusic(sound) : "Default Music" : "" : "Default music to play if no custom combat music has been imported."
	// Inputs
	input StartMusic(void) : "Start a random music track from the user's playlist."
	input StopMusic(void) : "Stop the currently playing music."
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") = asw_director_control : 
	"Alien Swarm Director Control"
[
	targetname(target_source) : "Name" : "@director" : "The name that other entities refer to this entity by."
	wanderers(choices) : "Wandering Aliens" : 0 : "Whether to spawn random drones around the players." =
	[
		0 : "No"
		1 : "Yes"
	]
	hordes(choices) : "Hordes" : 1 : "Whether to spawn large groups of drones periodically." =
	[
		0 : "No"
		1 : "Yes"
	]
	controlspawners(choices) : "Control Spawners" : 0 : "If enabled, asw_spawners will only work when the director is in an active spawning state." =
	[
		0 : "No"
		1 : "Yes"
	]
	input EnableHordes(void) : "Enable random horde spawning."
	input DisableHordes(void) : "Disable random horde spawning."
	input EnableWanderers(void) : "Enable random wandering aliens."
	input DisableWanderers(void) : "Disable random wandering aliens."
	input StartFinale(void) : "Enables wanderers, hordes and sends director into crazy spawning mode."
	input StartHoldout(void) : "Enables wanderers, hordes and sends director into crazy spawning mode."
	input StopHoldout(void) : "Reverts to pre-holdout state of wanderers and hordes."
	input ResetMarineIntensity(void) : "Sets the intensity value for all marines to 0, allowing the director to spawn aliens again sooner."
	input SpawnHordeSoon(void) : "Tries to spawn a horde within the next few seconds. Hordes must be enabled for this to have any effect."

	output OnEscapeRoomStart(void) : "Fired when marine enters the escape room with all objectives (except for escape) complete.  NOTE: If you rely on this output, you must ship the .layout file along with your map."
]
