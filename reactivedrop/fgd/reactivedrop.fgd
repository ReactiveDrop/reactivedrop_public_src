@include "swarm.fgd"
@include "swarm_fixed_ents.fgd"

@MaterialExclusion
[
	"console"
	"particle"
	"vgui"
	"voice"
]

@PointClass base(Targetname) = asw_deathmatch_mode : "If this entity is present Deathmatch game rules will be applied"
[
]

@PointClass base(PlayerClass, Angles) studio("models/editor/playerstart.mdl") = info_player_start_team1 :
	"This entity indicates the position and facing direction at which the player will spawn. Any number of "+
	"info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. "+
	"When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them "+
	"to indicate which one should be used when running the entire map."
[
	spawnflags(flags) =
	[
		1: "Master (Has priority if multiple info_player_starts exist)" : 0
	]
]

@PointClass base(PlayerClass, Angles) studio("models/editor/playerstart.mdl") = info_player_start_team2 :
	"This entity indicates the position and facing direction at which the player will spawn. Any number of "+
	"info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. "+
	"When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them "+
	"to indicate which one should be used when running the entire map."
[
	spawnflags(flags) =
	[
		1: "Master (Has priority if multiple info_player_starts exist)" : 0
	]
]

@PointClass base(Targetname, Parentname, Angles, Studiomodel) studioprop("models/sentry_gun/flame_top.mdl") = asw_sentry_top_flamer
[
	TurretRange(float) : "Turret Range" : "375" : "Maximum distance that it will pick targets."
]

@PointClass base(Targetname, Parentname, Angles, Studiomodel) studioprop("models/sentry_gun/freeze_top.mdl") = asw_sentry_top_icer
[
	TurretRange(float) : "Turret Range" : "300" : "Maximum distance that it will pick targets."
]

@PointClass base(Targetname, Parentname, Angles, Studiomodel) studioprop("models/sentry_gun/grenade_top.mdl") = asw_sentry_top_cannon
[
	TurretRange(float) : "Turret Range" : "1000" : "Maximum distance that it will pick targets."
	FireRate(float) : "Fire Rate" : "1.75" : "Time in seconds between each shot"
]

@SolidClass base(Trigger) = trigger_rd_marine_jumpjet :
	"A trigger volume that will force marine to perform jump jet or blink effect."
[
	wait(float) : "Delay Before Reset" : -1 : "Amount of time, in seconds, after the trigger has triggered before it can be triggered again. If set to -1, it will never trigger again. 0.2 is minimum, 0 will be converted to 0.2"
	
	Destination1(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination2(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination3(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination4(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination5(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination6(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination7(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
	Destination8(target_destination) : "Destination" : : "Marine will jump to this entity's origin. Each next jump will be performed to subsequent destination entity"
  
	JumpType(choices) : "Jump type" : 0 =
	[
		0 : "Jump Jet"
		1 : "Blink"
	]	
	
	JumpTimeOverride(float) : "Jump duration override" : 0 : "Time in seconds needed to perform Jump Jet or Blink. If 0 the default value is used "
	AnimationTimeOverride(float) : "Jump Jet animation time override" : 0 : "Time in seconds needed to perform Jump Jet or Blink animation. If 0 the default value is used "
	 
	// Outputs
	output OnJumpJetDone(void) : "Fired whenever the trigger is activated and jump started."
]

@SolidClass base(Trigger) = trigger_rd_sticktogether_area :
	"A trigger volume that will force bot marines to immediately follow leader inside this volume. Requires info_marine_hint or info_node_marine_hint entities inside the volume to work "
[
]

@FilterClass base(BaseFilter) iconsprite("editor/filter_name.vmt") = asw_filter_rolling :
	"A filter that selects rolling marines."
[
]

@SolidClass base(Targetname, Parentname, Origin, RenderFields, Global, Inputfilter, EnableDisable, Shadow) = func_asw_fade : 
	"A func_brush that fades when the camera is third person and the marine is below the origin." 
[
	spawnflags(flags) =
	[
		2: "Ignore player +USE" : 1
	]

	_minlight(string) : "Minimum Light Level" : : "The minimum level of ambient light that hits this brush."
	Solidity(choices) : "Solidity" : 2 : "Used to control the solidity/collision of these brushes." =
	[
		0 : "Toggle"
		1 : "Never Solid"
		2 : "Always Solid"
	]
	CollideWithGrenades(boolean) : "Collide With Grenades" : 0 : "If this entity is solid and this is not set, grenades will pass through it."
	excludednpc(string) : "NPC class excluded from collisions" : "" : "If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name."
	invert_exclusion(choices) : "Invert NPC class exclusion" : 0 : "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid." =
	[
		0 : "No"
		1 : "Yes"
	]

	solidbsp(boolean) : "Solid BSP" : 0 : "Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush."

	vrad_brush_cast_shadows(boolean) : "Shadows" : 1 : "Set this if this brush casts lightmap shadows."

	fade_opacity(integer) : "Fade Alpha (0-255)" : 0 : "Opacity to fade to when in third person and the marine is below the origin."
	AllowFade(boolean) : "Allow Fade" : 1 : ""

	input SetExcluded( string ) : "Change the NPC class excluded from collisions"
	input SetInvert( integer ) : "Set the state of inversion for NPC class exclusion (0 or 1)"
	input AllowFade( integer ) : "Enable or disable fading (0 or 1)"
]

@PointClass base(prop_dynamic_base, EnableDisable) sphere(fademindist) sphere(fademaxdist) studioprop() = prop_asw_fade :
	"A prop_dynamic that fades when the camera is third person and the marine is below the origin."
[
	fade_opacity(integer) : "Fade Alpha (0-255)" : 0 : "Opacity to fade to when in third person and the marine is below the origin."
	AllowFade(boolean) : "Allow Fade" : 1 : ""
	fade_origin(origin) : "Fade Origin (X Y Z)" : : ""

	input AllowFade(integer) : "Enable or disable fading (0 or 1)"
]

@PointClass base(Targetname, Parentname, RenderFields,DXLevelChoice) size(-2 -2 -2, 2 2 2) sprite() color(20 140 20) = env_sprite_asw_fade : 
	"An env_sprite that fades when the camera is third person and the marine is below the origin." 
[
	framerate(string) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/glow01.spr" : "Material of the sprite to be drawn."
	scale(string) : "Scale" : "" : "Scale multiplier of the sprite."
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
	]

	GlowProxySize(float) : "Size of Glow Proxy Geometry." : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."

	fade_opacity(integer) : "Fade Alpha (0-255)" : 0 : "Opacity to fade to when in third person and the marine is below the origin."
	AllowFade(boolean) : "Allow Fade" : 1 : ""
	fade_origin(origin) : "Fade Origin (X Y Z)" : : ""

	// Inputs
	input ColorRedValue(float) : "Sets the red color channel's value (0 - 255)."
	input ColorGreenValue(float) : "Sets the green color channel's value (0 - 255)."
	input ColorBlueValue(float) : "Sets the blue color channel's value (0 - 255)."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
	input HideSprite(void) : "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
	input ShowSprite(void) : "Show the sprite."
	input ToggleSprite(void) : "Toggle the sprite between hidden and shown."
	input AllowFade(integer) : "Enable or disable fading (0 or 1)"
]

@BaseClass = asw_fade_proxy
[
	parentname(target_destination) report : "Fade Entity" : : "The entity to control fading of. An entity that has at least one proxy will only use proxies to determine whether it should fade, not its origin. This must be a func_asw_fade or prop_asw_fade."
]

@PointClass base(asw_fade_proxy, Targetname, EnableDisable) size(-2 -2 -2, 2 2 2) sphere(FreeRadius) sphere(MaxRadius) = point_asw_fade_proxy : "A fade proxy that determines visibility by whether a line drawn between the proxy and the viewer's eyes crosses any objects. If the viewer's eyes are outside of the max radius, they cannot see this proxy. If the viewer's eyes are within the free vision radius, the proxy is considered visible without tracing the line."
[
	FreeRadius(float) : "Free Vision Radius" : 128 : "When the viewer is within this distance, they can always see this proxy."
	MaxRadius(float) : "Max Radius" : 768 : "When the viewer is further away than this distance, they cannot this proxy."
	BrushOnly(choices) : "Vision blocked by" : 0 : "Which types of entities block vision when the viewer is between the free and max radiuses? Vision is never blocked by physics props." =
	[
		0 : "Brushes and Props"
		1 : "Brushes Only"
	]
]

@SolidClass base(asw_fade_proxy, Targetname, EnableDisable) = trigger_asw_fade_proxy : "A fade proxy that determines visibility by whether the viewer's eyes are within a solid part of the brush model."
[
]

// 50cal Pickup //
@PointClass base(ASWPickup) studio("models/weapons/50calmg/50calmg.mdl")= 

asw_pickup_50calmg : "50cal Machine Gun"
[
	BulletsInGun(integer) : "Bullets In Gun" : 200
]

@PointClass base(Targetname) size(-2 -2 -2, 2 2 2) = point_toilet_flushable
[
	flushsound(sound) report : "Flush Sound" : "d1_trainstation.toiletflush"
	cooldown(float) : "Cooldown" : 10

	output OnPlayerUse(void) : ""
]

@SolidClass base(Targetname, EnableDisable) = func_rd_no_director_aliens : "A volume that prevents the director from spawning aliens on nodes within its bounds."
[
]

@PointClass base(Targetname, Parentname) iconsprite("editor/flat.vmt") = asw_health_bar :
    "Displays health of parent entity"
[
	StartDisabled(boolean) : "Start Disabled" : 0 : ""
	hideatfullhealth(boolean) : "Hide at Full Health" : 1 : "Health bar won't be displayed if its parent entity has full health"
	
	color(color255) : "Color" : "255 0 0 255" : "Color of this health bar." 
	
	scale(string) : "Scale" : "1.0" : "Scale multiplier of the sprite."
	
	// Inputs
	input Disable(void) : "Hide the health bar. Won't be drawn until the 'Enable' input is received."
	input Enable(void) : "Show the health bar."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
]

@PointClass base(Targetname) sphere(BarRadius) iconsprite("editor/flat.vmt") = rd_boss_bar :
	"Displays the progress of an event. (eg. the health of a boss)"
[
	BarMode(choices) : "Display Mode" : 0 : "How to display this bar on the player's screen." =
	[
		0 : "Fill To Right"
		1 : "Fill To Left"
		2 : "Numeric Value"
	]
	BarValue(float) : "Starting Value" : 100 : ""
	BarMax(float) : "Max Value" : 100 : ""
	BarID(string) : "Bar Group Identifier" : "" : "If two rd_boss_bar have different identifiers, they represent different bars that can appear on screen at the same time. This can be any text."
	BarTitle(string) : "Bar Title" : "" : "The title to display on the bar. Only the rd_boss_bar with the lowest Column and Row in a group will display its title."
	BarColumn(integer) : "Column" : 1 : ""
	BarRow(integer) : "Row" : 1 : ""
	BarScale(float) : "Height Scale" : "1.0" : ""
	BarRadius(float) : "Radius" : "-1" : "Distance (from the player's camera!) beyond which boss bar won't be drawn for that player. Lower than 0 means infinite."
	BarFGColor(color255) : "Filled Color" : "93 149 193 255" : ""
	BarBGColor(color255) : "Empty Color" : "9 32 54 255" : ""
	BarBorderColor(color255) : "Border Color" : "29 76 111 255" : ""
	BarFlashColor(color255) : "Flash Color" : "255 255 255 255" : "The color for the end of the bar when it differs from its previous value."
	BarFlashSustain(float) : "Flash Sustain Time" : "0.75" : "The number of seconds before the bar starts animating after it has changed."
	BarFlashInterpolate(float) : "Flash Interpolate Time" : "0.25" : "The number of seconds from the bar starting animating to finishing animating when it changes."

	// Inputs
	input Enable(void) : "Show the bar."
	input Disable(void) : "Hide the bar."
	input BarValue(float) : "Set the value of the bar."
	input BarMax(float) : "Change the maximum value of the bar."
	input BarScale(float) : "Change the height of the bar."
	input BarFGColor(color255) : ""
	input BarBGColor(color255) : ""
	input BarBorderColor(color255) : ""
	input BarFlashColor(color255) : ""
]

@SolidClass base(Targetname, Parentname, Origin, Trigger, EnableDisable) = trigger_asw_marine_melee :
	"A trigger volume that activates when a marine performs a melee attack "
[
	spawnflags(flags) = 
	[
		//1: "Clients" : 0
		2: "Marines and Aliens" : 1
		4: "Pushables": 0
		8: "Physics Objects" : 0
		16: "Only marines" : 0
		//32: "Only clients in vehicles" : 0
		64: "Everything" : 0
		//512: "Only clients *not* in vehicles" : 0
	]

	AngleTolerance(float) : "Angle Tolerance" : "30.0" : "The number of degrees from exactly facing the origin that the trigger will allow. Set to 360 to ignore origin location."

	output OnTrigger(void) : "Fired when a marine melee attacks towards the origin of this trigger while standing in it."
]

@FilterClass base(BaseFilter) iconsprite("editor/filter_class.vmt") = asw_filter_marine_class :
	"A filter that selects marines of a specified class."
[
	MarineClass(choices) : "Marine Class" : 0 : "The class of marine to match in this filter." =
	[
		0 : "Officer"
		1 : "Special Weapons"
		2 : "Medic"
		3 : "Tech"
	]
]

@PointClass base(Angles) = rd_tilegen_instance : "Used for TileGen instancing. Replaced with a random func_instance, but only if the map is compiled using TileGen."
[
	targetname(target_source) : "Fix Up Name" : : "The name that all entities will be fixed up with based upon the fix up style."
	fixup_style(Choices) : "Entity Name Fix Up" : 0 : "Fixup style for instanced entity names.  Uses the 'Fix Up Name' field." =
	[
		0 : "Prefix"
		1 : "Postfix"
		2 : "None"
	]

	glob1(string) : "Filename Pattern 1" : "lights_*.vmf" : ""
	weight1(float) : "Weight 1" : "1" : ""
	glob2(string) : "Filename Pattern 2" : "" : ""
	weight2(float) : "Weight 2" : "0" : ""
	glob3(string) : "Filename Pattern 3" : "" : ""
	weight3(float) : "Weight 3" : "0" : ""
	glob4(string) : "Filename Pattern 4" : "" : ""
	weight4(float) : "Weight 4" : "0" : ""
	glob5(string) : "Filename Pattern 5" : "" : ""
	weight5(float) : "Weight 5" : "0" : ""
	glob6(string) : "Filename Pattern 6" : "" : ""
	weight6(float) : "Weight 6" : "0" : ""
	glob7(string) : "Filename Pattern 7" : "" : ""
	weight7(float) : "Weight 7" : "0" : ""
	glob8(string) : "Filename Pattern 8" : "" : ""
	weight8(float) : "Weight 8" : "0" : ""
	glob9(string) : "Filename Pattern 9" : "" : ""
	weight9(float) : "Weight 9" : "0" : ""

	replace01(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace02(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace03(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace04(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace05(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace06(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace07(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace08(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace09(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
	replace10(instance_variable) : "Replace" : : "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
]

@PointClass base(ASWPickup, Studiomodel, RenderFields) studioprop() = rd_weapon_generic_object : "Carryable Object"
[
	CarriedName(string) : "Object Name" : "" : "The name of this object for the UI."
	MoveSpeedMultiplier(float) : "Movement Speed Multiplier" : "1.0" : "How fast marines should move while carrying this item."
	LargeObject(choices) : "Carry Animation" : 1 : "Which set of carry animations to use." =
	[
		0 : "Small Object"
		1 : "Large Object"
	]
	UseBoneMerge(choices) : "Carry Mode" : 0 : "How to place the object while it is being carried." =
	[
		0 : "Offset + Angle"
		1 : "Bone Merge"
	]
	CarriedAngle(angle) : "Carried Angle" : "0 0 0" : ""
	CarriedOffset(vector) : "Carried Offset" : "0 0 0" : ""
	EquipIcon(material) : "Equip Icon" : "" : ""

	// Inputs
	input ForcePickUp(target_destination) : "Force a marine to equip this item."
	input ForceDrop(void) : "Force the marine currently holding this item to drop it."

	// Outputs
	output OnPrimaryAttack(void) : "When a marine is holding the primary fire button, 10 times per second."
	output OnSecondaryAttack(void) : "When a marine is holding the secondary fire button, 10 times per second."
	output OnReload(void) : "When a marine presses the reload button."
	output OnPickedUp(void) : "When a marine picks up the item."
	output OnDropped(void) : "When a marine drops the item."
]

@SolidClass base( Targetname, EnableDisable ) = rd_func_jumpjet : "An entity to control free jumping/blinking area."
[
]

@PointClass base(Targetname) = asw_voiceover_dialogue : "Simple entity to replace logic_choreographed_scene when only one globally-audible voice line is needed."
[
	soundname(sound) report : "Sound Script Name" : "" : "Sound script name, should be an entry from level_sounds_*.txt or game_sounds_*.txt. For custom maps, create a file named maps/[mapname]_level_sounds.txt."
	actorname(string) : "Actor Name" : "" : "Name of actor for this voice line. If the same actor name is used for multiple asw_voiceover_dialogue entities, they will use the busy actor setting. Case insensitive, not displayed in-game."
	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this voice line needs is already talking when this dialogue is told to start." =
	[
		0 : "Start immediately"
		1 : "Wait for actor to finish"
	]

	// Inputs
	input Start(void) : "Starts playback of the voice line"

	// Outputs
	output OnStart(void) : "The voice line has started"
	output OnCompletion(void) : "The voice line has completed"
]

@PointClass base(Targetname, Parentname, Angles) studioprop("models/editor/camera.mdl") = rd_briefing_camera : "During briefing, show this camera's view instead of a looping video."
[
	fov(float) : "FOV" : 75 : "Field of view in degrees"
]

@SolidClass base(Trigger) = trigger_tonemap : "Change active tonemap for characters in this volume."
[
	TonemapName(target_destination) : "Tonemap Name" : : "Name of an env_tonemap_controller entity to make active."
]

@PointClass base(ASWPickup) studio("models/weapons/w_irifle.mdl") = asw_weapon_ar2 : "Assault Rifle 2"
[
	BulletsInGun(integer) : "Bullets In Gun" : 30
	Clips(integer) : "Clips" : 6
	SecondaryBullets(integer) : "Secondary Bullets" : 3
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammoar2.mdl") = asw_ammo_ar2 : "Pulse Rifle ammo refill"
[
	AddSecondary(choices) : "Add secondary item" : 1 : "If set this pickup adds secondary fire charge" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@FilterClass base(BaseFilter) iconsprite("editor/filter_class.vmt") = filter_combineball_type : "A filter that filters by combine ball type."
[
	balltype(choices) : "Ball Type" : 1 =
	[
		0 : "Not Thrown (in combine ball field, etc)"
		2 : "Thrown/Launched by the player's physcannon"
		3 : "Launched by point_combine_ball_launcher"
	]	
]

@BaseClass base(Targetname, Origin, Angles, Global) = CombineBallSpawners
[
	spawnflags(Flags) = 
	[
		4096 : "Start inactive" : 1
		8192 : "Combine power supply" : 0
	]

	ballcount(integer) : "Ball count" : 3 : "This is how many balls will be bouncing around inside the spawner"
	minspeed(float) : "Min ball speed" : "300.0" : "The minimum speed of balls that fly in the spawner"
	maxspeed(float) : "Max ball speed" : "600.0" : "The maximum speed of balls that fly in the spawner"
	ballradius(float) : "Ball radius" : "20.0" : "The radius of the energy balls"
	ballrespawntime(float) : "Ball Respawn Time" : "4.0f" : "The energy balls respawn time"

	input Enable(void) : "Enable spawning of combine balls"
	input Disable(void) : "Disable spawning of combine balls"

	output OnBallGrabbed(void) : "Fired when a combine ball is grabbed from the field by a mega physcannon"
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitTopSide(void) : "Fired when a combine ball in hits the top side of the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitBottomSide(void) : "Fired when a combine ball in hits the bottom side of the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
	output OnFirstBallReinserted(void) : "Fired when the first combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
]

@PointClass base(BasePropPhysics) studioprop("models/effects/combineball.mdl") = prop_combine_ball : "Combine Ball"
[
	// Inputs
	input Explode(void) : "Explode"
]

@SolidClass base(CombineBallSpawners) = func_combine_ball_spawner : "Spawns Combine balls."
[
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
]

@PointClass base(CombineBallSpawners) = point_combine_ball_launcher : "Launches Combine balls."
[
	launchconenoise(float) : "Noise to launch direction" : "0.0" : "Noise in degrees added to the launch direction."
	bullseyename(string) : "Name of bullseye" : "" : "If you select the Attach Bullseye spawnflag, you may specify a name here which will be given to the bullseye."
	maxballbounces(integer) : "Max number of bounces" : 8 : "Maximum number of bounces the balls are allowed to do before they are removed."

	spawnflags(Flags) =
	[
		1 : "Attach Bullseye" : 0
		2 : "Balls should collide against player" : 0
	]

    // Inputs
	input LaunchBall(void) : "Launch a ball from the spawner."
]

@BaseClass base(InhabitableNPC) = BaseCombine
[
	spawnflags(Flags) = 
	[
		65536 :  "Start LookOff" : 0
		//131072	: "Don't drop grenades" : 0
		//262144  : "Don't drop ar2 alt fire (elite only) " : 0
	]

	NumGrenades(choices) : "Number of Grenades" : "1" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Pressure the enemy (Keep advancing)"
		"2" : "Pressure until within 30ft, then normal"
	]
	
	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. WARNING: this animation only has a north component. For use under very special circumstances only." =
	[
		"0" : "No"
		"2" : "Yes"
	]

	// Inputs
	input LookOn(void) : "Look normally"	
	input LookOff(void) : "Don't look for myself, use other squad member's eyes"
	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input ThrowGrenadeAtTarget(target_destination) : "Throw a grenade at the specified target."
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_combine_s : "Combine Soldier (SMG)"
[
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_combine_shotgun : "Combine Soldier (Shotgun)"
[
	skin(integer) : "Skin" : 1 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default."
]

@NPCClass base(BaseCombine) studio("models/Combine_Super_Soldier.mdl") = npc_combine_elite : "Combine Elite Soldier (AR2)"
[
]

@NPCClass base(InhabitableNPC) studio("models/hunter.mdl") = npc_hunter :
	"A smaller, faster, strider that can pursue the player into buildings."
[
	FollowTarget(target_destination) : "Strider to Follow" : "" : "The name of the strider that this hunter should follow."

	// Inputs
	input FollowStrider(target_destination) : "Sets the name of the strider that this hunter should follow."

	input SetMinigunTime(float) : "Time to shoot at any set minigun target."
	input SetMinigunTarget(string) : "Hunter will shoot minigun at the named target."

	input DisableShooting(void) : "Forces the hunter to be melee-only."
	input EnableShooting(void) : "Allows the hunter to use range attacks or melee attacks."

	input DisableSquadShootDelay(void) : "Disables the delay between range attacks for squads of hunters, allowing them to shoot as frequently as they wish."
	input EnableSquadShootDelay(void) : "Enables the delay between range attacks for squads of hunters."
	
	input EnableUnplantedShooting(void) : "Used mainly for scripted attacks against bullseyes. Enables the hunter to shoot without having to plant first."
	input DisableUnplantedShooting(void) : "Returns the hunter to normal after a call to EnableUnplantedShooting."

	input DoPhysicsBlast(void) : "Hunter will instantly do the defensive physics blast."

	input Crouch(void) : "Crouch down."
	input Stand(void) : "Stand up from crouch."
	input DisableCrouchWalk(void) : "UNUSED: Prevents the hunter from crouch walking."
	input EnableCrouchWalk(void) : "UNUSED: Allows the hunter to crouch walk."

	input UseSiegeTargets(string) : "Pass in the name of info_targets to shoot at when I can't shoot at the player."
]

@NPCClass base(BaseNPC, Studiomodel) studio("models/combine_strider.mdl") = npc_strider : "Strider"
[
	spawnflags(Flags) = 
	[
		65536 :  "Can Stomp Player" : 0		
		131072 :  "Minimal damage taken from NPCs (1 point per missile)" : 0
	]

	//Inputs
	input SetMinigunTime(float) : "Time to shoot at any set minigun target"
	input SetMinigunTarget(string) : "Strider will shoot minigun at this"
	input DisableMinigun(void) : "Disables the minigun until further notice by the EnableMinigun input."
	input EnableMinigun(void) : "Enables the minigun if it was disabled by the DisableMinigun input."
	input SetCannonTarget(string) : "Strider will shoot cannon at this"
	input FlickRagdoll(void) : "Strider will flick anyone he's skewered"

	input StartPatrol(void) : "Start patrolling back and forth along the current track."
	input StopPatrol(void) : "Stop patrolling back and forth along the track. This will cause the helicopter to come to rest at the track which he's currently flying toward."
	input ChooseFarthestPathPoint(void) : "When tracking an enemy, choose the point on the path furthest from the enemy, but still in firing range"
	input ChooseNearestPathPoint(void) : "When tracking an enemy, choose the point on the path nearest from the enemy"
	input Crouch(void) : "Crouch down"
	input CrouchInstantly(void) : "Crouch instantly. This makes the Strider pop to a crouch. Do not do this where players can observe."
	input Stand(void) : "Stand up from crouch"
	input DisableCrouchWalk(void)
	input EnableCrouchWalk(void)
	
	input SetTargetPath(string) : "Set a path for the strider to patrol. The strider will first move to the closest point on the path"
	input ClearTargetPath(void) : "Clear the strider patrol path"

	input EnableAggressiveBehavior(void) : "Use aggressive behavior. Fire faster, more frequently"
	input DisableAggressiveBehavior(void) : "Stop using aggressive behavior. (Revert to normal)"

	input StopShootingMinigunForSeconds(float) : "Stop shooting the minigun for a period of time (specify seconds as parameter)"

	input DisableCrouch(void) : "Prevent the Strider from crouching"
	input DisableMoveToLOS(void) : "Prevent the Strider from seeking Line of Sight to target. (Hold position)"
	
	input DisableCollisionWith(string) : "Disable collision with a given object."
	input EnableCollisionWith(string) : "Reenable collision with a given object."
	
	input ScaleGroundSpeed(float) : "Scale the movement speed of the strider"

	disablephysics(choices) : "Disable physics (reduce CPU)" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
]

@NPCClass base(BaseHelicopter) studio("models/gunship.mdl" ) = npc_combinegunship : "Combine Gunship"
[

	// Inputs
	input OmniscientOn(void) : "Gunship knows target's location even when target is out of sight or behind cover"
	input OmniscientOff(void) : "Gunship relies on normal sight functions to locate target"
	input BlindfireOn(void ) : "Gunship will fire at an unseen target, attempting to punch through to them"
	input BlindfireOff(void ) : "Gunship only fires at viusible target"
	input SetPenetrationDepth( float ) : "Set penetration depth of bullets"

	input SetDockingBBox( void ) : "Shrink Bounding Box"
	input SetNormalBBox( void ) : "Set Bounding Box to normal size"

	input EnableGroundAttack( void ) : "Allow the gunship to use its ground attack"
	input DisableGroundAttack( void ) : "Don't allow the gunship to use its ground attack"
	input DoGroundAttack( string ) : "Causes the gunship to execute its ground attack"

	input BecomeInvulnerable( void ): "Stops the gunship from taking damage, but still makes sounds effects"
	input BecomeVulnerable( void ): "Makes the gunship act normally to damage"

	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"

	// Outputs
	output OnFireCannon(void)  : "Fires when the gunship fires a cannon round"
	output OnFirstDamage( void ) : "Fired when the first damage is done to the gunship."
	output OnSecondDamage( void ) : "Fired when the second damage is done to the gunship."
	output OnThirdDamage( void ) : "Fired when the third damage is done to the gunship."
	output OnFourthDamage( void ) : "Fired when the fourth damage is done to the gunship."

	spawnflags(Flags) =
	[
		4096 : "No ground attack" : 0
	]
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_target_helicopter_crash : "Helicopter Crash Target"
[
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_target_gunshipcrash : "Gunship Crash Target"
[
	input Enable(void) : "Enable the crash target."
	input Disable(void) : "Disable the crash target."
]

@NPCClass base(BaseHelicopter) studio("models/combine_dropship.mdl" ) = npc_combinedropship : "Combine Dropship"
[
	spawnflags(Flags) =
	[
		32768 : "Wait for input before dropoff" : 0
	]

	LandTarget(target_destination) : "Land target name"
	GunRange(float) : "Crate Gun Range" : 2048 : "If the dropship's carrying a crate with a gun on it, it'll only shoot targets within this range."

	//RollermineTemplate(target_destination) : "Name of Rollermine Template" : "" : "If this dropship drops any rollermines due to the 'DropMines' input being fired, it will use this template for the rollermines it creates. If left blank, ordinary rollermines will be dropped."

	NPCTemplate(target_destination) : "Name of Template NPC 1"
	NPCTemplate2(target_destination) : "Name of Template NPC 2"
	NPCTemplate3(target_destination) : "Name of Template NPC 3"
	NPCTemplate4(target_destination) : "Name of Template NPC 4"
	NPCTemplate5(target_destination) : "Name of Template NPC 5"
	NPCTemplate6(target_destination) : "Name of Template NPC 6"

	Dustoff1(target_destination) : "Name of dustoff point for NPC 1"
	Dustoff2(target_destination) : "Name of dustoff point for NPC 2"
	Dustoff3(target_destination) : "Name of dustoff point for NPC 3"
	Dustoff4(target_destination) : "Name of dustoff point for NPC 4"
	Dustoff5(target_destination) : "Name of dustoff point for NPC 5"
	Dustoff6(target_destination) : "Name of dustoff point for NPC 6"

	//APCVehicleName(target_destination) : "Name of the APC to drop"
	Invulnerable(Choices) : "Invulnerable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	CrateType(Choices) : "Crate Type" : 2 =
	[
		//-3 : "Jeep (No crate)"
		//-2 : "APC (No crate)"
		-1 : "Strider (No crate)"
		//0 : "Roller Hopper"
		1 : "Soldier Crate"
		2 : "None"
	]

	// Inputs
	input LandLeaveCrate(integer) : "Land, drop soldiers, and leave the crate behind. Specify the number of troops to drop off in the parameter."
	input LandTakeCrate(integer) : "Land, drop soldiers, but don't leave the crate behind. Specify the number of troops to drop off in the parameter."
	//input DropMines(integer) : "Drop Rollermines. Specify the number of mines to drop in the parameter."
	input DropStrider(void) : "Drop the Strider you're carrying. Now."
	//input DropAPC(void) : "Drop the APC you're carrying. Now."
	input Hover(target_destination) : "Hover over a named target entity until told to fly to a path."
	input Pickup(string) : "Pickup an entity."
	input SetLandTarget(string) : "Set my land target name."
	input SetGunRange(float) : "Set my crate gun's range."

	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"

	input StopWaitingForDropoff(void) : "Stop waiting for the dropoff. Dropoff as soon as possible."


	// Outputs
	output OnFinishedDropoff(void)  : "Fires when the dropship has finished a dropoff."
	output OnFinishedPickup(void) : "Fires when the dropship has finished a pickup."

	output OnCrateShotDownBeforeDropoff(float) : "Fires when the container was shot down before it dropped off soldiers. The parameter contains the number of soldiers that weren't successfully dropped off."
	output OnCrateShotDownAfterDropoff(void) : "Fires when the container was shot down after it dropped off soldiers."

]

@NPCClass base(BaseHelicopter) studio("models/combine_helicopter.mdl" ) = npc_helicopter : "Helicopter"
[
	spawnflags(Flags) = 
	[
		65536 :  "Loud rotor wash sound" : 0
		131072 : "Electrical drone" : 0
		262144 : "Helicopter lights" : 0
		524288 : "Ignore avoid spheres+boxes" : 0
		1048576 : "More aggressive attacks" : 0
		2097152 : "Cast long shadow" : 0
	]

	InitialSpeed(string) : "Initial Speed" : "0"
	GracePeriod(float) : "Grace Period" : "2.0" : "Time in seconds the helicopter has to see the player before he starts shooting"
	PatrolSpeed(float) : "Patrol Speed" : "0" : "Speed at which the helicopter moves if he has no enemy."

	noncombat(choices) : "Non-combat (Do not precache gibs)" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input GunOn(void) : "GunOn"
	input GunOff(void) : "GunOff"
	input MissileOn(void) : "MissileOn"
	input MissileOff(void) : "MissileOff"
	input EnableRotorWash(void) : "Turns on rotor wash effects"
	input DisableRotorWash(void) : "Turns off rotor wash effects"
	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"
	input StartBombingVehicle(void) : "Starts the chopper leading enemy vehicles and dropping bombs on them."
	input StartTrailingVehicle(void) : "Starts the chopper trailing enemy vehicles and shooting at them."
	input StartDefaultBehavior(void) : "Starts the chopper in the mode where he always stops at nav points instead of stopping anywhere in between nav points."
	input StartAlwaysLeadingVehicle(void) : "Starts the chopper *always* leading enemy vehicles (regardless of how they are moving w/respect to the path) and dropping bombs on them. This mode is different from StartBombingVehicle in that it never uses the machine gun."
	input StartSprinkleBehavior(void) : "Starts the chopper dropping bombs randomly + shooting at the player."
	input StartBullrushBehavior(void) : "Starts the chopper bullrushing the player."
	input SetHealthFraction(float) : "Sets the chopper health as a percentage of max health"

	input EnableDeadlyShooting(void) : "Starts the chopper being deadly to on-foot players"
	input DisableDeadlyShooting(void) : "Stops the chopper being deadly to on-foot players"

	input StartNormalShooting(void) : "The chopper will fire in short bursts. Good for on-foot experiences"
	input StartLongCycleShooting(void) : "The chopper fires in long bursts"
	input StartContinuousShooting(void) : "The chopper fires continuously."
	input StartFastShooting(void) : "The chopper fires normal bursts, but does not 'charge up' the gun. Fires immediately."

	input ResetIdleTime(void) : "Allows the helicopter to fire immediately if he's not in the middle of charging or firing"
	input SetAngles(string) : "Instantly snaps the orientation of the helicopter (Pitch Yaw Roll)"
	input DropBomb(void) : "Immediately drops a bomb based on normal bomb dropping rules"
	input DropBombStraightDown(void) : "Immediately drops a bomb directly downwards"
	input DropBombAtTarget(target_destination) : "Immediately drops a bomb directly at the target destination, but only if the player isn't right there"
	input DropBombAtTargetAlways(target_destination) : "Immediately drops a bomb directly at the target destination, no matter whether it's fair or not."
	input DropBombDelay(float) : "Add a delay before the next bomb is dropped"
	input BecomeIndestructible(void) : "Makes the helicopter take no more damage"

	input DisablePathVisibilityTests(void) : "When the helicopter moves, he will not check for visibility from the path_track to the enemy to cull out path_tracks"
	input EnablePathVisibilityTests(void) : "When the helicopter moves, he will only move to path_tracks that have line-of-sight to the enemy"

	input StartCarpetBombing(void) : "Starts the helicopter constantly dropping megabombs until StopCarpetBombing input"
	input StopCarpetBombing(void) : "Stop the carpet bombing behavior"

	// Outputs
	output OnHealthChanged(integer) : "Fires when the helicopter health changes. The integer is the percentage of health the chopper has from 0-100."
	output OnShotDown(void) : "Fires the instant the helicopter is killed"
]

@PointClass base(Targetname, Parentname) iconsprite("editor/env_firesource") color(255 255 0) sphere(radius) = npc_heli_avoidsphere : "Helicopter avoidance sphere"
[
	spawnflags(Flags) = 
	[
		65536 :  "Avoid the sphere above and below" : 0
	]
	radius(float) : "Radius" : 128
]

@SolidClass base(Origin, Angles, Parentname) color(255 255 0) = npc_heli_avoidbox : "Helicopter avoidance box"
[
	spawnflags(Flags) = 
	[
		65536 :  "Avoid the box above and below" : 0
	]
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammogrenadelauncher.mdl") = asw_ammo_grenade_launcher : "Grenade Launcher ammo refill"
[
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammosniperrifle.mdl") = asw_ammo_sniper_rifle : "Sniper Rifle ammo refill"
[
]

@PointClass base(ASWPickup) studio("models/swarm/ammo/ammohvyrifle.mdl") = asw_ammo_heavy_rifle : "Heavy Rifle ammo refill"
[
	AddSecondary(choices) : "Add secondary item" : 1 : "If set this pickup adds secondary fire charge" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/marine_hint_dynamic.mdl") color(8 64 232) = info_marine_hint_dynamic :
	"Movable follow hint node for marines"
[
]

@PointClass base(Targetname, EnableDisable) = rd_hud_counter : "Heads-Up Display Counter"
[
	SetCount(integer) : "Starting Count" : 0 : "The initial value of this counter."
	MinCount(integer) : "Minimum Count" : 0 : "The lowest value this counter can reach via the Add/Subtract inputs."
	MaxCount(integer) : "Maximum Count" : 0 : "The highest value this counter can reach via the Add/Subtract inputs."
	label(string) : "Label" : "" : "Text to show next to the number. Can be a translation key like #asw_stats_kills."
	format(string) : "Number Format" : "%s1" : "How the number should be formatted. %s1 is replaced with the value of the counter."
	order(integer) : "Order" : 0 : "Higher numbers are closer to the bottom of the list."
	holdtime(float) : "Hold Time" : "0.5" : "Time between changing the value of the counter and the counter starting to animate."
	interptime(float) : "Interpolate Time" : "0.5" : "Time between the counter starting to animate and the end of the animation."

	input SetCount(integer) : "Set the value of the counter. Not limited by minimum and maximum count."
	input Add(integer) : "Add to the value of the counter."
	input Subtract(integer) : "Subtract from the value of the counter."
	input SetLimitNPC(target_destination) : "Hide this counter from all players who are not viewing the specified NPC (eg. marine)."
	input ClearLimitNPC(void) : "Make this counter visible to all players."
]
