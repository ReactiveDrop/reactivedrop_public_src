//====== Copyright © 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: 
//
//=============================================================================

//  DYNAMIC: "COMPRESSED_VERTS"	"0..1"
//	DYNAMIC: "SKINNING"			"0..1"
//  STATIC: "MODEL"				"0..1"
//  STATIC: "FOW"				"0..1"

#include "common_fog_vs_fxc.h"
#include "common_vs_fxc.h"
#include "fow_vs_fxc.h"

//const float4 cBaseTexCoordTransform[ 2 ]			: register( SHADER_SPECIFIC_CONST_6 );

const float4 g_flProjectedSizeRotation				: register( c49 );
const float4 g_vProjectionOrigin					: register( c48 );

static const bool g_bSkinning		= SKINNING ? true : false;

#if ( FOW == 1 )
const float4 g_vFoWWorldSize						: register( c26 );
#endif

struct VS_INPUT
{
	float4 vPos							: POSITION;
	float4 vBoneWeights					: BLENDWEIGHT;
	float4 vBoneIndices					: BLENDINDICES;
};

struct VS_OUTPUT
{
	float4 vProjPos							: POSITION;	
	float2 vBaseTexCoord					: TEXCOORD0;
#if ( FOW == 1 )
	float2 vFowCoord						: TEXCOORD3;
#endif
};

static const float3 Normal = float3( 0, 0, -1.0 );

float3 ClosestPointOnPlane( float3 TestPoint )
{
    float distance = dot( Normal, TestPoint - g_vProjectionOrigin );
    
    return TestPoint - distance*Normal;
}

float2 ComputeTexCoord( const float3 vWorldPos, const float flRotation, const float flScale )
{
	float3 vTest = ClosestPointOnPlane( vWorldPos );
	float2 vBaseCoord = ( ( vTest - g_vProjectionOrigin ) / g_flProjectedSizeRotation.x ) + 0.5f;
	
	float2 	vAdjust = vBaseCoord - float2( 0.5, 0.5 );
	float2 	vResult;
	float 	c = cos( flRotation );
	float 	s = sin( flRotation );
	
   	vResult.x = ( vAdjust.x * c ) + ( vAdjust.y * -s );
   	vResult.y = ( vAdjust.x * s ) + ( vAdjust.y * c );
   	
   	return ( vResult / flScale ) + float2( 0.5, 0.5 );
}

VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o;

	float3 vNewPos = v.vPos;
//	vNewPos.z += 128.0;
	
	float4 vProjPos;
	float3 vWorldPos;

	SkinPosition( g_bSkinning, v.vPos, v.vBoneWeights, v.vBoneIndices, vWorldPos );

	// vProjPos = mul( float4( vNewPos, 1 ), cModelViewProj );
	vProjPos = mul( float4( vWorldPos, 1 ), cViewProj );
	o.vProjPos = vProjPos;

//	vWorldPos = mul( float4( vNewPos, 1 ), cModel[0] );
	
#if ( FOW == 1 )
	o.vFowCoord = CalcFoWCoord( g_vFoWWorldSize, vWorldPos.xy );
#endif

	o.vBaseTexCoord = ComputeTexCoord( vWorldPos, g_flProjectedSizeRotation.y, 1.0 );
	
	return o;
}
